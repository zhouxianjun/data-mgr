<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	   xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    					http://www.springframework.org/schema/util 
    					http://www.springframework.org/schema/util/spring-util-3.0.xsd
					   	http://www.springframework.org/schema/tx
    					http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"
	   default-lazy-init="false">
	
	<bean id="props" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:jdbc.properties</value>
				<value>classpath*:core.properties</value>
			</list>
		</property>
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="ignoreResourceNotFound" value="true" />
	</bean>

	<!--***************** 连接核心库的配置 *****************-->
	<bean id="coreWriteDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${core.write.db.jdbc.url}" />
		<property name="username" value="${core.write.db.jdbc.user}" />
		<property name="password" value="${core.write.db.jdbc.password}" />
		<property name="initialSize" value="${core.write.db.pool.init}" />
		<property name="minIdle" value="${core.write.db.pool.min}" />
		<property name="maxActive" value="${core.write.db.pool.max}" />
		<property name="maxWait" value="60000" />
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 1" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="true" />
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
		<!-- 超过时间限制是否回收 -->
		<property name="removeAbandoned" value="true" />
		<!-- 超时时间；单位为秒。180秒=3分钟 -->
		<property name="removeAbandonedTimeout" value="180" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<property name="filters" value="stat,slf4j" />
	</bean>
	<bean id="coreReadDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${core.read.db.jdbc.url}" />
		<property name="username" value="${core.read.db.jdbc.user}" />
		<property name="password" value="${core.read.db.jdbc.password}" />
		<property name="initialSize" value="${core.read.db.pool.init}" />
		<property name="minIdle" value="${core.read.db.pool.min}" />
		<property name="maxActive" value="${core.read.db.pool.max}" />
		<property name="maxWait" value="30000" />
		<property name="timeBetweenEvictionRunsMillis" value="10000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 1" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="true" />
		<property name="useUnfairLock" value="true" />
		<!--<property name="poolPreparedStatements" value="false" />--> <!-- mysql不支持 -->
		<!--<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />-->
		<!-- 超过时间限制是否回收 -->
		<property name="removeAbandoned" value="true" />
		<!-- 超时时间；单位为秒。180秒=3分钟 -->
		<property name="removeAbandonedTimeout" value="180" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<property name="filters" value="stat,slf4j" />
	</bean>
	
	<!-- 动态数据源，可以在运行时通过相应的holder动态改变当前的数据源-->
	<bean id="dynamicDataSource" class="com.alone.common.mybatis.DynamicDataSource">
		<property name="targetDataSources">
		   <map key-type="com.alone.common.dto.DataSourceType">
		      <entry key="WRITE" value-ref="coreWriteDataSource"/>     
		      <entry key="READ" value-ref="coreReadDataSource"/>     
		   </map>     
		</property>     
		<property name="defaultTargetDataSource" ref="coreWriteDataSource"/>    
	</bean> 
	<bean id="coreSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="dataSource" ref="dynamicDataSource" />
		<property name="typeAliasesPackage" value="com.alone.common.entity" />
		<property name="typeHandlersPackage" value="com.alone.core.mapper.handler" />
	</bean>
	<!--<bean id="coreMapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.alone.core.mapper"/>
		<property name="sqlSessionFactoryBeanName" value="coreSqlSessionFactory" />
	</bean>-->
	<bean id="coreMapperScanner" class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.alone.core.mapper"/>
		<property name="sqlSessionFactoryBeanName" value="coreSqlSessionFactory" />
	</bean>
	<bean id="coreTxManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dynamicDataSource" />
	</bean>
	<bean id="coreTansTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="coreTxManager" />
	</bean>
	<tx:annotation-driven transaction-manager="coreTxManager" order="2"/>
	<aop:aspectj-autoproxy/>
</beans>