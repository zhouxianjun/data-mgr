//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
RoleStruct = module.exports.RoleStruct = function(args) {
  this.id = null;
  this.name = null;
  this.pid = null;
  this.create_time = null;
  this.update_time = null;
  this.status = null;
  this.ow = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.pid !== undefined && args.pid !== null) {
      this.pid = args.pid;
    }
    if (args.create_time !== undefined && args.create_time !== null) {
      this.create_time = args.create_time;
    }
    if (args.update_time !== undefined && args.update_time !== null) {
      this.update_time = args.update_time;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.ow !== undefined && args.ow !== null) {
      this.ow = args.ow;
    }
  }
};
RoleStruct.prototype = {};
RoleStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.pid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.create_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.update_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.status = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.ow = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RoleStruct.prototype.write = function(output) {
  output.writeStructBegin('RoleStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.pid !== null && this.pid !== undefined) {
    output.writeFieldBegin('pid', Thrift.Type.I64, 3);
    output.writeI64(this.pid);
    output.writeFieldEnd();
  }
  if (this.create_time !== null && this.create_time !== undefined) {
    output.writeFieldBegin('create_time', Thrift.Type.I64, 5);
    output.writeI64(this.create_time);
    output.writeFieldEnd();
  }
  if (this.update_time !== null && this.update_time !== undefined) {
    output.writeFieldBegin('update_time', Thrift.Type.I64, 6);
    output.writeI64(this.update_time);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.BOOL, 7);
    output.writeBool(this.status);
    output.writeFieldEnd();
  }
  if (this.ow !== null && this.ow !== undefined) {
    output.writeFieldBegin('ow', Thrift.Type.BOOL, 8);
    output.writeBool(this.ow);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MenuStruct = module.exports.MenuStruct = function(args) {
  this.id = null;
  this.name = null;
  this.pid = null;
  this.description = null;
  this.seq = null;
  this.status = null;
  this.create_time = null;
  this.path = null;
  this.target = null;
  this.icon = null;
  this.ow = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.pid !== undefined && args.pid !== null) {
      this.pid = args.pid;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.create_time !== undefined && args.create_time !== null) {
      this.create_time = args.create_time;
    }
    if (args.path !== undefined && args.path !== null) {
      this.path = args.path;
    }
    if (args.target !== undefined && args.target !== null) {
      this.target = args.target;
    }
    if (args.icon !== undefined && args.icon !== null) {
      this.icon = args.icon;
    }
    if (args.ow !== undefined && args.ow !== null) {
      this.ow = args.ow;
    }
  }
};
MenuStruct.prototype = {};
MenuStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.pid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.status = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.create_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.target = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.icon = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.ow = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MenuStruct.prototype.write = function(output) {
  output.writeStructBegin('MenuStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.pid !== null && this.pid !== undefined) {
    output.writeFieldBegin('pid', Thrift.Type.I64, 3);
    output.writeI64(this.pid);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 4);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 5);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.BOOL, 6);
    output.writeBool(this.status);
    output.writeFieldEnd();
  }
  if (this.create_time !== null && this.create_time !== undefined) {
    output.writeFieldBegin('create_time', Thrift.Type.I64, 7);
    output.writeI64(this.create_time);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 8);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  if (this.target !== null && this.target !== undefined) {
    output.writeFieldBegin('target', Thrift.Type.STRING, 9);
    output.writeString(this.target);
    output.writeFieldEnd();
  }
  if (this.icon !== null && this.icon !== undefined) {
    output.writeFieldBegin('icon', Thrift.Type.STRING, 10);
    output.writeString(this.icon);
    output.writeFieldEnd();
  }
  if (this.ow !== null && this.ow !== undefined) {
    output.writeFieldBegin('ow', Thrift.Type.BOOL, 11);
    output.writeBool(this.ow);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InterfaceStruct = module.exports.InterfaceStruct = function(args) {
  this.id = null;
  this.name = null;
  this.auth = null;
  this.description = null;
  this.seq = null;
  this.status = null;
  this.create_time = null;
  this.ow = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.auth !== undefined && args.auth !== null) {
      this.auth = args.auth;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.create_time !== undefined && args.create_time !== null) {
      this.create_time = args.create_time;
    }
    if (args.ow !== undefined && args.ow !== null) {
      this.ow = args.ow;
    }
  }
};
InterfaceStruct.prototype = {};
InterfaceStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.auth = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.status = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.create_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.ow = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InterfaceStruct.prototype.write = function(output) {
  output.writeStructBegin('InterfaceStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.auth !== null && this.auth !== undefined) {
    output.writeFieldBegin('auth', Thrift.Type.STRING, 3);
    output.writeString(this.auth);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 4);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 5);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.BOOL, 6);
    output.writeBool(this.status);
    output.writeFieldEnd();
  }
  if (this.create_time !== null && this.create_time !== undefined) {
    output.writeFieldBegin('create_time', Thrift.Type.I64, 7);
    output.writeI64(this.create_time);
    output.writeFieldEnd();
  }
  if (this.ow !== null && this.ow !== undefined) {
    output.writeFieldBegin('ow', Thrift.Type.BOOL, 8);
    output.writeBool(this.ow);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStruct = module.exports.UserStruct = function(args) {
  this.id = null;
  this.username = null;
  this.password = null;
  this.name = null;
  this.real_name = null;
  this.company = null;
  this.city_id = null;
  this.province_id = null;
  this.email = null;
  this.phone = null;
  this.create_time = null;
  this.status = null;
  this.pid = null;
  this.pids = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.real_name !== undefined && args.real_name !== null) {
      this.real_name = args.real_name;
    }
    if (args.company !== undefined && args.company !== null) {
      this.company = args.company;
    }
    if (args.city_id !== undefined && args.city_id !== null) {
      this.city_id = args.city_id;
    }
    if (args.province_id !== undefined && args.province_id !== null) {
      this.province_id = args.province_id;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
    if (args.phone !== undefined && args.phone !== null) {
      this.phone = args.phone;
    }
    if (args.create_time !== undefined && args.create_time !== null) {
      this.create_time = args.create_time;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.pid !== undefined && args.pid !== null) {
      this.pid = args.pid;
    }
    if (args.pids !== undefined && args.pids !== null) {
      this.pids = args.pids;
    }
  }
};
UserStruct.prototype = {};
UserStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.real_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.company = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.city_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.province_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.create_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.status = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.pid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.pids = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStruct.prototype.write = function(output) {
  output.writeStructBegin('UserStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 4);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.real_name !== null && this.real_name !== undefined) {
    output.writeFieldBegin('real_name', Thrift.Type.STRING, 5);
    output.writeString(this.real_name);
    output.writeFieldEnd();
  }
  if (this.company !== null && this.company !== undefined) {
    output.writeFieldBegin('company', Thrift.Type.STRING, 6);
    output.writeString(this.company);
    output.writeFieldEnd();
  }
  if (this.city_id !== null && this.city_id !== undefined) {
    output.writeFieldBegin('city_id', Thrift.Type.I32, 7);
    output.writeI32(this.city_id);
    output.writeFieldEnd();
  }
  if (this.province_id !== null && this.province_id !== undefined) {
    output.writeFieldBegin('province_id', Thrift.Type.I32, 8);
    output.writeI32(this.province_id);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 9);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 10);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.create_time !== null && this.create_time !== undefined) {
    output.writeFieldBegin('create_time', Thrift.Type.I64, 11);
    output.writeI64(this.create_time);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.BOOL, 12);
    output.writeBool(this.status);
    output.writeFieldEnd();
  }
  if (this.pid !== null && this.pid !== undefined) {
    output.writeFieldBegin('pid', Thrift.Type.I64, 13);
    output.writeI64(this.pid);
    output.writeFieldEnd();
  }
  if (this.pids !== null && this.pids !== undefined) {
    output.writeFieldBegin('pids', Thrift.Type.STRING, 14);
    output.writeString(this.pids);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PageParamStruct = module.exports.PageParamStruct = function(args) {
  this.page = 1;
  this.pageSize = 15;
  this.sortName = null;
  this.sortDir = null;
  if (args) {
    if (args.page !== undefined && args.page !== null) {
      this.page = args.page;
    }
    if (args.pageSize !== undefined && args.pageSize !== null) {
      this.pageSize = args.pageSize;
    }
    if (args.sortName !== undefined && args.sortName !== null) {
      this.sortName = args.sortName;
    }
    if (args.sortDir !== undefined && args.sortDir !== null) {
      this.sortDir = args.sortDir;
    }
  }
};
PageParamStruct.prototype = {};
PageParamStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.page = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.pageSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sortName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sortDir = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PageParamStruct.prototype.write = function(output) {
  output.writeStructBegin('PageParamStruct');
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.I32, 1);
    output.writeI32(this.page);
    output.writeFieldEnd();
  }
  if (this.pageSize !== null && this.pageSize !== undefined) {
    output.writeFieldBegin('pageSize', Thrift.Type.I32, 2);
    output.writeI32(this.pageSize);
    output.writeFieldEnd();
  }
  if (this.sortName !== null && this.sortName !== undefined) {
    output.writeFieldBegin('sortName', Thrift.Type.STRING, 3);
    output.writeString(this.sortName);
    output.writeFieldEnd();
  }
  if (this.sortDir !== null && this.sortDir !== undefined) {
    output.writeFieldBegin('sortDir', Thrift.Type.STRING, 4);
    output.writeString(this.sortDir);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PageStruct = module.exports.PageStruct = function(args) {
  this.pageNum = null;
  this.pageSize = null;
  this.count = null;
  this.current = null;
  this.items = null;
  if (args) {
    if (args.pageNum !== undefined && args.pageNum !== null) {
      this.pageNum = args.pageNum;
    }
    if (args.pageSize !== undefined && args.pageSize !== null) {
      this.pageSize = args.pageSize;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.current !== undefined && args.current !== null) {
      this.current = args.current;
    }
    if (args.items !== undefined && args.items !== null) {
      this.items = args.items;
    }
  }
};
PageStruct.prototype = {};
PageStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.pageNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.pageSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.current = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.items = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PageStruct.prototype.write = function(output) {
  output.writeStructBegin('PageStruct');
  if (this.pageNum !== null && this.pageNum !== undefined) {
    output.writeFieldBegin('pageNum', Thrift.Type.I32, 1);
    output.writeI32(this.pageNum);
    output.writeFieldEnd();
  }
  if (this.pageSize !== null && this.pageSize !== undefined) {
    output.writeFieldBegin('pageSize', Thrift.Type.I32, 2);
    output.writeI32(this.pageSize);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 3);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.current !== null && this.current !== undefined) {
    output.writeFieldBegin('current', Thrift.Type.I32, 4);
    output.writeI32(this.current);
    output.writeFieldEnd();
  }
  if (this.items !== null && this.items !== undefined) {
    output.writeFieldBegin('items', Thrift.Type.STRING, 5);
    output.writeString(this.items);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResourcesStruct = module.exports.ResourcesStruct = function(args) {
  this.id = null;
  this.path = null;
  this.md5 = null;
  this.size = null;
  this.name = null;
  this.create_time = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.path !== undefined && args.path !== null) {
      this.path = args.path;
    }
    if (args.md5 !== undefined && args.md5 !== null) {
      this.md5 = args.md5;
    }
    if (args.size !== undefined && args.size !== null) {
      this.size = args.size;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.create_time !== undefined && args.create_time !== null) {
      this.create_time = args.create_time;
    }
  }
};
ResourcesStruct.prototype = {};
ResourcesStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.md5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.size = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.create_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResourcesStruct.prototype.write = function(output) {
  output.writeStructBegin('ResourcesStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 2);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.STRING, 3);
    output.writeString(this.md5);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I32, 4);
    output.writeI32(this.size);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 5);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.create_time !== null && this.create_time !== undefined) {
    output.writeFieldBegin('create_time', Thrift.Type.I64, 6);
    output.writeI64(this.create_time);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoxStruct = module.exports.BoxStruct = function(args) {
  this.id = null;
  this.user_id = null;
  this.box_id = null;
  this.status = null;
  this.province_id = null;
  this.city_id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.user_id !== undefined && args.user_id !== null) {
      this.user_id = args.user_id;
    }
    if (args.box_id !== undefined && args.box_id !== null) {
      this.box_id = args.box_id;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.province_id !== undefined && args.province_id !== null) {
      this.province_id = args.province_id;
    }
    if (args.city_id !== undefined && args.city_id !== null) {
      this.city_id = args.city_id;
    }
  }
};
BoxStruct.prototype = {};
BoxStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.user_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.box_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.status = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.province_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.city_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoxStruct.prototype.write = function(output) {
  output.writeStructBegin('BoxStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.user_id !== null && this.user_id !== undefined) {
    output.writeFieldBegin('user_id', Thrift.Type.I64, 2);
    output.writeI64(this.user_id);
    output.writeFieldEnd();
  }
  if (this.box_id !== null && this.box_id !== undefined) {
    output.writeFieldBegin('box_id', Thrift.Type.STRING, 3);
    output.writeString(this.box_id);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.BOOL, 4);
    output.writeBool(this.status);
    output.writeFieldEnd();
  }
  if (this.province_id !== null && this.province_id !== undefined) {
    output.writeFieldBegin('province_id', Thrift.Type.I32, 5);
    output.writeI32(this.province_id);
    output.writeFieldEnd();
  }
  if (this.city_id !== null && this.city_id !== undefined) {
    output.writeFieldBegin('city_id', Thrift.Type.I32, 6);
    output.writeI32(this.city_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VersionStruct = module.exports.VersionStruct = function(args) {
  this.id = null;
  this.resource = null;
  this.version = null;
  this.version_code = null;
  this.desc = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.resource !== undefined && args.resource !== null) {
      this.resource = args.resource;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.version_code !== undefined && args.version_code !== null) {
      this.version_code = args.version_code;
    }
    if (args.desc !== undefined && args.desc !== null) {
      this.desc = args.desc;
    }
  }
};
VersionStruct.prototype = {};
VersionStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.resource = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.version_code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.desc = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VersionStruct.prototype.write = function(output) {
  output.writeStructBegin('VersionStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.resource !== null && this.resource !== undefined) {
    output.writeFieldBegin('resource', Thrift.Type.I64, 2);
    output.writeI64(this.resource);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 3);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.version_code !== null && this.version_code !== undefined) {
    output.writeFieldBegin('version_code', Thrift.Type.I32, 4);
    output.writeI32(this.version_code);
    output.writeFieldEnd();
  }
  if (this.desc !== null && this.desc !== undefined) {
    output.writeFieldBegin('desc', Thrift.Type.STRING, 5);
    output.writeString(this.desc);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppStruct = module.exports.AppStruct = function(args) {
  this.id = null;
  this.name = null;
  this.zh_name = null;
  this.cp_name = null;
  this.price = null;
  this.network = null;
  this.open_network = null;
  this.memo = null;
  this.require = null;
  this.white = null;
  this.black = null;
  this.active_id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.zh_name !== undefined && args.zh_name !== null) {
      this.zh_name = args.zh_name;
    }
    if (args.cp_name !== undefined && args.cp_name !== null) {
      this.cp_name = args.cp_name;
    }
    if (args.price !== undefined && args.price !== null) {
      this.price = args.price;
    }
    if (args.network !== undefined && args.network !== null) {
      this.network = args.network;
    }
    if (args.open_network !== undefined && args.open_network !== null) {
      this.open_network = args.open_network;
    }
    if (args.memo !== undefined && args.memo !== null) {
      this.memo = args.memo;
    }
    if (args.require !== undefined && args.require !== null) {
      this.require = args.require;
    }
    if (args.white !== undefined && args.white !== null) {
      this.white = args.white;
    }
    if (args.black !== undefined && args.black !== null) {
      this.black = args.black;
    }
    if (args.active_id !== undefined && args.active_id !== null) {
      this.active_id = args.active_id;
    }
  }
};
AppStruct.prototype = {};
AppStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.zh_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.cp_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.price = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.open_network = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.memo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.require = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.white = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.black = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.active_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppStruct.prototype.write = function(output) {
  output.writeStructBegin('AppStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.zh_name !== null && this.zh_name !== undefined) {
    output.writeFieldBegin('zh_name', Thrift.Type.STRING, 3);
    output.writeString(this.zh_name);
    output.writeFieldEnd();
  }
  if (this.cp_name !== null && this.cp_name !== undefined) {
    output.writeFieldBegin('cp_name', Thrift.Type.STRING, 4);
    output.writeString(this.cp_name);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.price);
    output.writeFieldEnd();
  }
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 6);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.open_network !== null && this.open_network !== undefined) {
    output.writeFieldBegin('open_network', Thrift.Type.BOOL, 7);
    output.writeBool(this.open_network);
    output.writeFieldEnd();
  }
  if (this.memo !== null && this.memo !== undefined) {
    output.writeFieldBegin('memo', Thrift.Type.STRING, 8);
    output.writeString(this.memo);
    output.writeFieldEnd();
  }
  if (this.require !== null && this.require !== undefined) {
    output.writeFieldBegin('require', Thrift.Type.BOOL, 9);
    output.writeBool(this.require);
    output.writeFieldEnd();
  }
  if (this.white !== null && this.white !== undefined) {
    output.writeFieldBegin('white', Thrift.Type.BOOL, 10);
    output.writeBool(this.white);
    output.writeFieldEnd();
  }
  if (this.black !== null && this.black !== undefined) {
    output.writeFieldBegin('black', Thrift.Type.BOOL, 11);
    output.writeBool(this.black);
    output.writeFieldEnd();
  }
  if (this.active_id !== null && this.active_id !== undefined) {
    output.writeFieldBegin('active_id', Thrift.Type.I64, 12);
    output.writeI64(this.active_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppRequireStruct = module.exports.AppRequireStruct = function(args) {
  this.id = null;
  this.name = null;
  this.resources_id = null;
  this.type = null;
  this.memo = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.resources_id !== undefined && args.resources_id !== null) {
      this.resources_id = args.resources_id;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.memo !== undefined && args.memo !== null) {
      this.memo = args.memo;
    }
  }
};
AppRequireStruct.prototype = {};
AppRequireStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.resources_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.memo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppRequireStruct.prototype.write = function(output) {
  output.writeStructBegin('AppRequireStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.resources_id !== null && this.resources_id !== undefined) {
    output.writeFieldBegin('resources_id', Thrift.Type.I64, 3);
    output.writeI64(this.resources_id);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 4);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.memo !== null && this.memo !== undefined) {
    output.writeFieldBegin('memo', Thrift.Type.STRING, 5);
    output.writeString(this.memo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppWhiteStruct = module.exports.AppWhiteStruct = function(args) {
  this.id = null;
  this.name = null;
  this.resources_id = null;
  this.memo = null;
  this.version = null;
  this.brand_id = null;
  this.model_id = null;
  this.version_id = null;
  this.base_version_id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.resources_id !== undefined && args.resources_id !== null) {
      this.resources_id = args.resources_id;
    }
    if (args.memo !== undefined && args.memo !== null) {
      this.memo = args.memo;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.brand_id !== undefined && args.brand_id !== null) {
      this.brand_id = args.brand_id;
    }
    if (args.model_id !== undefined && args.model_id !== null) {
      this.model_id = args.model_id;
    }
    if (args.version_id !== undefined && args.version_id !== null) {
      this.version_id = args.version_id;
    }
    if (args.base_version_id !== undefined && args.base_version_id !== null) {
      this.base_version_id = args.base_version_id;
    }
  }
};
AppWhiteStruct.prototype = {};
AppWhiteStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.resources_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.memo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.brand_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.model_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.version_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.base_version_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppWhiteStruct.prototype.write = function(output) {
  output.writeStructBegin('AppWhiteStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.resources_id !== null && this.resources_id !== undefined) {
    output.writeFieldBegin('resources_id', Thrift.Type.I64, 3);
    output.writeI64(this.resources_id);
    output.writeFieldEnd();
  }
  if (this.memo !== null && this.memo !== undefined) {
    output.writeFieldBegin('memo', Thrift.Type.STRING, 4);
    output.writeString(this.memo);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 5);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.brand_id !== null && this.brand_id !== undefined) {
    output.writeFieldBegin('brand_id', Thrift.Type.I64, 6);
    output.writeI64(this.brand_id);
    output.writeFieldEnd();
  }
  if (this.model_id !== null && this.model_id !== undefined) {
    output.writeFieldBegin('model_id', Thrift.Type.I64, 7);
    output.writeI64(this.model_id);
    output.writeFieldEnd();
  }
  if (this.version_id !== null && this.version_id !== undefined) {
    output.writeFieldBegin('version_id', Thrift.Type.I64, 8);
    output.writeI64(this.version_id);
    output.writeFieldEnd();
  }
  if (this.base_version_id !== null && this.base_version_id !== undefined) {
    output.writeFieldBegin('base_version_id', Thrift.Type.I64, 9);
    output.writeI64(this.base_version_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppActiveStruct = module.exports.AppActiveStruct = function(args) {
  this.id = null;
  this.name = null;
  this.open_count = null;
  this.flow = null;
  this.stay_days = null;
  this.show_time = null;
  this.open_network = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.open_count !== undefined && args.open_count !== null) {
      this.open_count = args.open_count;
    }
    if (args.flow !== undefined && args.flow !== null) {
      this.flow = args.flow;
    }
    if (args.stay_days !== undefined && args.stay_days !== null) {
      this.stay_days = args.stay_days;
    }
    if (args.show_time !== undefined && args.show_time !== null) {
      this.show_time = args.show_time;
    }
    if (args.open_network !== undefined && args.open_network !== null) {
      this.open_network = args.open_network;
    }
  }
};
AppActiveStruct.prototype = {};
AppActiveStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.open_count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.flow = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.stay_days = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.show_time = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.open_network = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppActiveStruct.prototype.write = function(output) {
  output.writeStructBegin('AppActiveStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.open_count !== null && this.open_count !== undefined) {
    output.writeFieldBegin('open_count', Thrift.Type.I32, 3);
    output.writeI32(this.open_count);
    output.writeFieldEnd();
  }
  if (this.flow !== null && this.flow !== undefined) {
    output.writeFieldBegin('flow', Thrift.Type.I32, 4);
    output.writeI32(this.flow);
    output.writeFieldEnd();
  }
  if (this.stay_days !== null && this.stay_days !== undefined) {
    output.writeFieldBegin('stay_days', Thrift.Type.I32, 5);
    output.writeI32(this.stay_days);
    output.writeFieldEnd();
  }
  if (this.show_time !== null && this.show_time !== undefined) {
    output.writeFieldBegin('show_time', Thrift.Type.I32, 6);
    output.writeI32(this.show_time);
    output.writeFieldEnd();
  }
  if (this.open_network !== null && this.open_network !== undefined) {
    output.writeFieldBegin('open_network', Thrift.Type.BOOL, 7);
    output.writeBool(this.open_network);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PackageStruct = module.exports.PackageStruct = function(args) {
  this.id = null;
  this.name = null;
  this.price = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.price !== undefined && args.price !== null) {
      this.price = args.price;
    }
  }
};
PackageStruct.prototype = {};
PackageStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.price = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PackageStruct.prototype.write = function(output) {
  output.writeStructBegin('PackageStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.price);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppPackageStruct = module.exports.AppPackageStruct = function(args) {
  this.id = null;
  this.name = null;
  this.common = null;
  this.root = null;
  this.brand_id = null;
  this.model_id = null;
  this.version_id = null;
  this.base_version_id = null;
  this.package_id = null;
  this.pre = null;
  this.install = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.common !== undefined && args.common !== null) {
      this.common = args.common;
    }
    if (args.root !== undefined && args.root !== null) {
      this.root = args.root;
    }
    if (args.brand_id !== undefined && args.brand_id !== null) {
      this.brand_id = args.brand_id;
    }
    if (args.model_id !== undefined && args.model_id !== null) {
      this.model_id = args.model_id;
    }
    if (args.version_id !== undefined && args.version_id !== null) {
      this.version_id = args.version_id;
    }
    if (args.base_version_id !== undefined && args.base_version_id !== null) {
      this.base_version_id = args.base_version_id;
    }
    if (args.package_id !== undefined && args.package_id !== null) {
      this.package_id = args.package_id;
    }
    if (args.pre !== undefined && args.pre !== null) {
      this.pre = Thrift.copyList(args.pre, [null]);
    }
    if (args.install !== undefined && args.install !== null) {
      this.install = Thrift.copyList(args.install, [null]);
    }
  }
};
AppPackageStruct.prototype = {};
AppPackageStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.common = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.root = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.brand_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.model_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.version_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.base_version_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.package_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.pre = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI64();
          this.pre.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.install = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readI64();
          this.install.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppPackageStruct.prototype.write = function(output) {
  output.writeStructBegin('AppPackageStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.common !== null && this.common !== undefined) {
    output.writeFieldBegin('common', Thrift.Type.BOOL, 3);
    output.writeBool(this.common);
    output.writeFieldEnd();
  }
  if (this.root !== null && this.root !== undefined) {
    output.writeFieldBegin('root', Thrift.Type.BOOL, 4);
    output.writeBool(this.root);
    output.writeFieldEnd();
  }
  if (this.brand_id !== null && this.brand_id !== undefined) {
    output.writeFieldBegin('brand_id', Thrift.Type.I64, 5);
    output.writeI64(this.brand_id);
    output.writeFieldEnd();
  }
  if (this.model_id !== null && this.model_id !== undefined) {
    output.writeFieldBegin('model_id', Thrift.Type.I64, 6);
    output.writeI64(this.model_id);
    output.writeFieldEnd();
  }
  if (this.version_id !== null && this.version_id !== undefined) {
    output.writeFieldBegin('version_id', Thrift.Type.I64, 7);
    output.writeI64(this.version_id);
    output.writeFieldEnd();
  }
  if (this.base_version_id !== null && this.base_version_id !== undefined) {
    output.writeFieldBegin('base_version_id', Thrift.Type.I64, 8);
    output.writeI64(this.base_version_id);
    output.writeFieldEnd();
  }
  if (this.package_id !== null && this.package_id !== undefined) {
    output.writeFieldBegin('package_id', Thrift.Type.I64, 9);
    output.writeI64(this.package_id);
    output.writeFieldEnd();
  }
  if (this.pre !== null && this.pre !== undefined) {
    output.writeFieldBegin('pre', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.I64, this.pre.length);
    for (var iter14 in this.pre)
    {
      if (this.pre.hasOwnProperty(iter14))
      {
        iter14 = this.pre[iter14];
        output.writeI64(iter14);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.install !== null && this.install !== undefined) {
    output.writeFieldBegin('install', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.I64, this.install.length);
    for (var iter15 in this.install)
    {
      if (this.install.hasOwnProperty(iter15))
      {
        iter15 = this.install[iter15];
        output.writeI64(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RequirePackageStruct = module.exports.RequirePackageStruct = function(args) {
  this.id = null;
  this.name = null;
  this.android_version = null;
  this.root = null;
  this.pre = null;
  this.install = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.android_version !== undefined && args.android_version !== null) {
      this.android_version = args.android_version;
    }
    if (args.root !== undefined && args.root !== null) {
      this.root = args.root;
    }
    if (args.pre !== undefined && args.pre !== null) {
      this.pre = Thrift.copyList(args.pre, [null]);
    }
    if (args.install !== undefined && args.install !== null) {
      this.install = Thrift.copyList(args.install, [null]);
    }
  }
};
RequirePackageStruct.prototype = {};
RequirePackageStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.android_version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.root = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.pre = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readI64();
          this.pre.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size23 = 0;
        var _rtmp327;
        this.install = [];
        var _etype26 = 0;
        _rtmp327 = input.readListBegin();
        _etype26 = _rtmp327.etype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          var elem29 = null;
          elem29 = input.readI64();
          this.install.push(elem29);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequirePackageStruct.prototype.write = function(output) {
  output.writeStructBegin('RequirePackageStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.android_version !== null && this.android_version !== undefined) {
    output.writeFieldBegin('android_version', Thrift.Type.STRING, 3);
    output.writeString(this.android_version);
    output.writeFieldEnd();
  }
  if (this.root !== null && this.root !== undefined) {
    output.writeFieldBegin('root', Thrift.Type.BOOL, 4);
    output.writeBool(this.root);
    output.writeFieldEnd();
  }
  if (this.pre !== null && this.pre !== undefined) {
    output.writeFieldBegin('pre', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I64, this.pre.length);
    for (var iter30 in this.pre)
    {
      if (this.pre.hasOwnProperty(iter30))
      {
        iter30 = this.pre[iter30];
        output.writeI64(iter30);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.install !== null && this.install !== undefined) {
    output.writeFieldBegin('install', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.I64, this.install.length);
    for (var iter31 in this.install)
    {
      if (this.install.hasOwnProperty(iter31))
      {
        iter31 = this.install[iter31];
        output.writeI64(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RootModelStruct = module.exports.RootModelStruct = function(args) {
  this.id = null;
  this.brand_id = null;
  this.model_id = null;
  this.version_id = null;
  this.base_version_id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.brand_id !== undefined && args.brand_id !== null) {
      this.brand_id = args.brand_id;
    }
    if (args.model_id !== undefined && args.model_id !== null) {
      this.model_id = args.model_id;
    }
    if (args.version_id !== undefined && args.version_id !== null) {
      this.version_id = args.version_id;
    }
    if (args.base_version_id !== undefined && args.base_version_id !== null) {
      this.base_version_id = args.base_version_id;
    }
  }
};
RootModelStruct.prototype = {};
RootModelStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.brand_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.model_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.version_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.base_version_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RootModelStruct.prototype.write = function(output) {
  output.writeStructBegin('RootModelStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.brand_id !== null && this.brand_id !== undefined) {
    output.writeFieldBegin('brand_id', Thrift.Type.I64, 2);
    output.writeI64(this.brand_id);
    output.writeFieldEnd();
  }
  if (this.model_id !== null && this.model_id !== undefined) {
    output.writeFieldBegin('model_id', Thrift.Type.I64, 3);
    output.writeI64(this.model_id);
    output.writeFieldEnd();
  }
  if (this.version_id !== null && this.version_id !== undefined) {
    output.writeFieldBegin('version_id', Thrift.Type.I64, 4);
    output.writeI64(this.version_id);
    output.writeFieldEnd();
  }
  if (this.base_version_id !== null && this.base_version_id !== undefined) {
    output.writeFieldBegin('base_version_id', Thrift.Type.I64, 5);
    output.writeI64(this.base_version_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RootConfigStruct = module.exports.RootConfigStruct = function(args) {
  this.id = null;
  this.name = null;
  this.version = null;
  this.memo = null;
  this.resources_id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.memo !== undefined && args.memo !== null) {
      this.memo = args.memo;
    }
    if (args.resources_id !== undefined && args.resources_id !== null) {
      this.resources_id = args.resources_id;
    }
  }
};
RootConfigStruct.prototype = {};
RootConfigStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.memo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.resources_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RootConfigStruct.prototype.write = function(output) {
  output.writeStructBegin('RootConfigStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 3);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.memo !== null && this.memo !== undefined) {
    output.writeFieldBegin('memo', Thrift.Type.STRING, 4);
    output.writeString(this.memo);
    output.writeFieldEnd();
  }
  if (this.resources_id !== null && this.resources_id !== undefined) {
    output.writeFieldBegin('resources_id', Thrift.Type.I64, 5);
    output.writeI64(this.resources_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PushStruct = module.exports.PushStruct = function(args) {
  this.id = null;
  this.user_id = null;
  this.name = null;
  this.type = null;
  this.img = null;
  this.text = null;
  this.client_type = null;
  this.app = null;
  this.deduct = null;
  this.url = null;
  this.status = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.user_id !== undefined && args.user_id !== null) {
      this.user_id = args.user_id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.img !== undefined && args.img !== null) {
      this.img = new ttypes.ResourcesStruct(args.img);
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.client_type !== undefined && args.client_type !== null) {
      this.client_type = args.client_type;
    }
    if (args.app !== undefined && args.app !== null) {
      this.app = new ttypes.ResourcesStruct(args.app);
    }
    if (args.deduct !== undefined && args.deduct !== null) {
      this.deduct = args.deduct;
    }
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
PushStruct.prototype = {};
PushStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.user_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.img = new ttypes.ResourcesStruct();
        this.img.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.client_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.app = new ttypes.ResourcesStruct();
        this.app.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.DOUBLE) {
        this.deduct = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PushStruct.prototype.write = function(output) {
  output.writeStructBegin('PushStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.user_id !== null && this.user_id !== undefined) {
    output.writeFieldBegin('user_id', Thrift.Type.I64, 2);
    output.writeI64(this.user_id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 4);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.img !== null && this.img !== undefined) {
    output.writeFieldBegin('img', Thrift.Type.STRUCT, 5);
    this.img.write(output);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 6);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.client_type !== null && this.client_type !== undefined) {
    output.writeFieldBegin('client_type', Thrift.Type.I32, 7);
    output.writeI32(this.client_type);
    output.writeFieldEnd();
  }
  if (this.app !== null && this.app !== undefined) {
    output.writeFieldBegin('app', Thrift.Type.STRUCT, 8);
    this.app.write(output);
    output.writeFieldEnd();
  }
  if (this.deduct !== null && this.deduct !== undefined) {
    output.writeFieldBegin('deduct', Thrift.Type.DOUBLE, 9);
    output.writeDouble(this.deduct);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 10);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 11);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InstallActiveStruct = module.exports.InstallActiveStruct = function(args) {
  this.id = null;
  this.name = null;
  this.memo = null;
  this.hours = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.memo !== undefined && args.memo !== null) {
      this.memo = args.memo;
    }
    if (args.hours !== undefined && args.hours !== null) {
      this.hours = args.hours;
    }
  }
};
InstallActiveStruct.prototype = {};
InstallActiveStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.memo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.hours = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InstallActiveStruct.prototype.write = function(output) {
  output.writeStructBegin('InstallActiveStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.memo !== null && this.memo !== undefined) {
    output.writeFieldBegin('memo', Thrift.Type.STRING, 3);
    output.writeString(this.memo);
    output.writeFieldEnd();
  }
  if (this.hours !== null && this.hours !== undefined) {
    output.writeFieldBegin('hours', Thrift.Type.I32, 4);
    output.writeI32(this.hours);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidOperation = module.exports.InvalidOperation = function(args) {
  Thrift.TException.call(this, "InvalidOperation")
  this.name = "InvalidOperation"
  this.code = null;
  this.msg = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = args.msg;
    }
  }
};
Thrift.inherits(InvalidOperation, Thrift.TException);
InvalidOperation.prototype.name = 'InvalidOperation';
InvalidOperation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidOperation.prototype.write = function(output) {
  output.writeStructBegin('InvalidOperation');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 2);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

