/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.alone.thrift.struct;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-08-04")
public class PageParamStruct implements org.apache.thrift.TBase<PageParamStruct, PageParamStruct._Fields>, java.io.Serializable, Cloneable, Comparable<PageParamStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PageParamStruct");

  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SORT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sortName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SORT_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("sortDir", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.MAP, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PageParamStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PageParamStructTupleSchemeFactory());
  }

  private int page; // optional
  private int pageSize; // optional
  private String sortName; // optional
  private String sortDir; // optional
  private Map<String,String> query; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PAGE((short)1, "page"),
    PAGE_SIZE((short)2, "pageSize"),
    SORT_NAME((short)3, "sortName"),
    SORT_DIR((short)4, "sortDir"),
    QUERY((short)5, "query");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAGE
          return PAGE;
        case 2: // PAGE_SIZE
          return PAGE_SIZE;
        case 3: // SORT_NAME
          return SORT_NAME;
        case 4: // SORT_DIR
          return SORT_DIR;
        case 5: // QUERY
          return QUERY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAGE_ISSET_ID = 0;
  private static final int __PAGESIZE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PAGE,_Fields.PAGE_SIZE,_Fields.SORT_NAME,_Fields.SORT_DIR,_Fields.QUERY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SORT_NAME, new org.apache.thrift.meta_data.FieldMetaData("sortName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SORT_DIR, new org.apache.thrift.meta_data.FieldMetaData("sortDir", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PageParamStruct.class, metaDataMap);
  }

  public PageParamStruct() {
    this.page = 1;

    this.pageSize = 15;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PageParamStruct(PageParamStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    this.page = other.page;
    this.pageSize = other.pageSize;
    if (other.isSetSortName()) {
      this.sortName = other.sortName;
    }
    if (other.isSetSortDir()) {
      this.sortDir = other.sortDir;
    }
    if (other.isSetQuery()) {
      Map<String,String> __this__query = new HashMap<String,String>(other.query);
      this.query = __this__query;
    }
  }

  public PageParamStruct deepCopy() {
    return new PageParamStruct(this);
  }

  @Override
  public void clear() {
    this.page = 1;

    this.pageSize = 15;

    this.sortName = null;
    this.sortDir = null;
    this.query = null;
  }

  public int getPage() {
    return this.page;
  }

  public PageParamStruct setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getPageSize() {
    return this.pageSize;
  }

  public PageParamStruct setPageSize(int pageSize) {
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    return this;
  }

  public void unsetPageSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
  public boolean isSetPageSize() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  public void setPageSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
  }

  public String getSortName() {
    return this.sortName;
  }

  public PageParamStruct setSortName(String sortName) {
    this.sortName = sortName;
    return this;
  }

  public void unsetSortName() {
    this.sortName = null;
  }

  /** Returns true if field sortName is set (has been assigned a value) and false otherwise */
  public boolean isSetSortName() {
    return this.sortName != null;
  }

  public void setSortNameIsSet(boolean value) {
    if (!value) {
      this.sortName = null;
    }
  }

  public String getSortDir() {
    return this.sortDir;
  }

  public PageParamStruct setSortDir(String sortDir) {
    this.sortDir = sortDir;
    return this;
  }

  public void unsetSortDir() {
    this.sortDir = null;
  }

  /** Returns true if field sortDir is set (has been assigned a value) and false otherwise */
  public boolean isSetSortDir() {
    return this.sortDir != null;
  }

  public void setSortDirIsSet(boolean value) {
    if (!value) {
      this.sortDir = null;
    }
  }

  public int getQuerySize() {
    return (this.query == null) ? 0 : this.query.size();
  }

  public void putToQuery(String key, String val) {
    if (this.query == null) {
      this.query = new HashMap<String,String>();
    }
    this.query.put(key, val);
  }

  public Map<String,String> getQuery() {
    return this.query;
  }

  public PageParamStruct setQuery(Map<String,String> query) {
    this.query = query;
    return this;
  }

  public void unsetQuery() {
    this.query = null;
  }

  /** Returns true if field query is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery() {
    return this.query != null;
  }

  public void setQueryIsSet(boolean value) {
    if (!value) {
      this.query = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case PAGE_SIZE:
      if (value == null) {
        unsetPageSize();
      } else {
        setPageSize((Integer)value);
      }
      break;

    case SORT_NAME:
      if (value == null) {
        unsetSortName();
      } else {
        setSortName((String)value);
      }
      break;

    case SORT_DIR:
      if (value == null) {
        unsetSortDir();
      } else {
        setSortDir((String)value);
      }
      break;

    case QUERY:
      if (value == null) {
        unsetQuery();
      } else {
        setQuery((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAGE:
      return getPage();

    case PAGE_SIZE:
      return getPageSize();

    case SORT_NAME:
      return getSortName();

    case SORT_DIR:
      return getSortDir();

    case QUERY:
      return getQuery();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAGE:
      return isSetPage();
    case PAGE_SIZE:
      return isSetPageSize();
    case SORT_NAME:
      return isSetSortName();
    case SORT_DIR:
      return isSetSortDir();
    case QUERY:
      return isSetQuery();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PageParamStruct)
      return this.equals((PageParamStruct)that);
    return false;
  }

  public boolean equals(PageParamStruct that) {
    if (that == null)
      return false;

    boolean this_present_page = true && this.isSetPage();
    boolean that_present_page = true && that.isSetPage();
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_pageSize = true && this.isSetPageSize();
    boolean that_present_pageSize = true && that.isSetPageSize();
    if (this_present_pageSize || that_present_pageSize) {
      if (!(this_present_pageSize && that_present_pageSize))
        return false;
      if (this.pageSize != that.pageSize)
        return false;
    }

    boolean this_present_sortName = true && this.isSetSortName();
    boolean that_present_sortName = true && that.isSetSortName();
    if (this_present_sortName || that_present_sortName) {
      if (!(this_present_sortName && that_present_sortName))
        return false;
      if (!this.sortName.equals(that.sortName))
        return false;
    }

    boolean this_present_sortDir = true && this.isSetSortDir();
    boolean that_present_sortDir = true && that.isSetSortDir();
    if (this_present_sortDir || that_present_sortDir) {
      if (!(this_present_sortDir && that_present_sortDir))
        return false;
      if (!this.sortDir.equals(that.sortDir))
        return false;
    }

    boolean this_present_query = true && this.isSetQuery();
    boolean that_present_query = true && that.isSetQuery();
    if (this_present_query || that_present_query) {
      if (!(this_present_query && that_present_query))
        return false;
      if (!this.query.equals(that.query))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_page = true && (isSetPage());
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_pageSize = true && (isSetPageSize());
    list.add(present_pageSize);
    if (present_pageSize)
      list.add(pageSize);

    boolean present_sortName = true && (isSetSortName());
    list.add(present_sortName);
    if (present_sortName)
      list.add(sortName);

    boolean present_sortDir = true && (isSetSortDir());
    list.add(present_sortDir);
    if (present_sortDir)
      list.add(sortDir);

    boolean present_query = true && (isSetQuery());
    list.add(present_query);
    if (present_query)
      list.add(query);

    return list.hashCode();
  }

  @Override
  public int compareTo(PageParamStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortName()).compareTo(other.isSetSortName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortName, other.sortName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortDir()).compareTo(other.isSetSortDir());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortDir()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortDir, other.sortDir);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PageParamStruct(");
    boolean first = true;

    if (isSetPage()) {
      sb.append("page:");
      sb.append(this.page);
      first = false;
    }
    if (isSetPageSize()) {
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
    }
    if (isSetSortName()) {
      if (!first) sb.append(", ");
      sb.append("sortName:");
      if (this.sortName == null) {
        sb.append("null");
      } else {
        sb.append(this.sortName);
      }
      first = false;
    }
    if (isSetSortDir()) {
      if (!first) sb.append(", ");
      sb.append("sortDir:");
      if (this.sortDir == null) {
        sb.append("null");
      } else {
        sb.append(this.sortDir);
      }
      first = false;
    }
    if (isSetQuery()) {
      if (!first) sb.append(", ");
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PageParamStructStandardSchemeFactory implements SchemeFactory {
    public PageParamStructStandardScheme getScheme() {
      return new PageParamStructStandardScheme();
    }
  }

  private static class PageParamStructStandardScheme extends StandardScheme<PageParamStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PageParamStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageSize = iprot.readI32();
              struct.setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SORT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sortName = iprot.readString();
              struct.setSortNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SORT_DIR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sortDir = iprot.readString();
              struct.setSortDirIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.query = new HashMap<String,String>(2*_map0.size);
                String _key1;
                String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.query.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PageParamStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetPage()) {
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPageSize()) {
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
      }
      if (struct.sortName != null) {
        if (struct.isSetSortName()) {
          oprot.writeFieldBegin(SORT_NAME_FIELD_DESC);
          oprot.writeString(struct.sortName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sortDir != null) {
        if (struct.isSetSortDir()) {
          oprot.writeFieldBegin(SORT_DIR_FIELD_DESC);
          oprot.writeString(struct.sortDir);
          oprot.writeFieldEnd();
        }
      }
      if (struct.query != null) {
        if (struct.isSetQuery()) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.query.size()));
            for (Map.Entry<String, String> _iter4 : struct.query.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PageParamStructTupleSchemeFactory implements SchemeFactory {
    public PageParamStructTupleScheme getScheme() {
      return new PageParamStructTupleScheme();
    }
  }

  private static class PageParamStructTupleScheme extends TupleScheme<PageParamStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PageParamStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPage()) {
        optionals.set(0);
      }
      if (struct.isSetPageSize()) {
        optionals.set(1);
      }
      if (struct.isSetSortName()) {
        optionals.set(2);
      }
      if (struct.isSetSortDir()) {
        optionals.set(3);
      }
      if (struct.isSetQuery()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetPageSize()) {
        oprot.writeI32(struct.pageSize);
      }
      if (struct.isSetSortName()) {
        oprot.writeString(struct.sortName);
      }
      if (struct.isSetSortDir()) {
        oprot.writeString(struct.sortDir);
      }
      if (struct.isSetQuery()) {
        {
          oprot.writeI32(struct.query.size());
          for (Map.Entry<String, String> _iter5 : struct.query.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PageParamStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pageSize = iprot.readI32();
        struct.setPageSizeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sortName = iprot.readString();
        struct.setSortNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sortDir = iprot.readString();
        struct.setSortDirIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.query = new HashMap<String,String>(2*_map6.size);
          String _key7;
          String _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readString();
            _val8 = iprot.readString();
            struct.query.put(_key7, _val8);
          }
        }
        struct.setQueryIsSet(true);
      }
    }
  }

}

