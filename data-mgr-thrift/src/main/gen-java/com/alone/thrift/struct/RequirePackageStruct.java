/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.alone.thrift.struct;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-08-04")
public class RequirePackageStruct implements org.apache.thrift.TBase<RequirePackageStruct, RequirePackageStruct._Fields>, java.io.Serializable, Cloneable, Comparable<RequirePackageStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequirePackageStruct");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ANDROID_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("android_version", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ROOT_FIELD_DESC = new org.apache.thrift.protocol.TField("root", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField PRE_FIELD_DESC = new org.apache.thrift.protocol.TField("pre", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField INSTALL_FIELD_DESC = new org.apache.thrift.protocol.TField("install", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RequirePackageStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RequirePackageStructTupleSchemeFactory());
  }

  private long id; // required
  private String name; // required
  private String android_version; // required
  private boolean root; // required
  private List<Long> pre; // optional
  private List<Long> install; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    ANDROID_VERSION((short)3, "android_version"),
    ROOT((short)4, "root"),
    PRE((short)5, "pre"),
    INSTALL((short)6, "install");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // ANDROID_VERSION
          return ANDROID_VERSION;
        case 4: // ROOT
          return ROOT;
        case 5: // PRE
          return PRE;
        case 6: // INSTALL
          return INSTALL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __ROOT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PRE,_Fields.INSTALL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ANDROID_VERSION, new org.apache.thrift.meta_data.FieldMetaData("android_version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROOT, new org.apache.thrift.meta_data.FieldMetaData("root", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PRE, new org.apache.thrift.meta_data.FieldMetaData("pre", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.INSTALL, new org.apache.thrift.meta_data.FieldMetaData("install", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequirePackageStruct.class, metaDataMap);
  }

  public RequirePackageStruct() {
  }

  public RequirePackageStruct(
    long id,
    String name,
    String android_version,
    boolean root)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.android_version = android_version;
    this.root = root;
    setRootIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RequirePackageStruct(RequirePackageStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetAndroid_version()) {
      this.android_version = other.android_version;
    }
    this.root = other.root;
    if (other.isSetPre()) {
      List<Long> __this__pre = new ArrayList<Long>(other.pre);
      this.pre = __this__pre;
    }
    if (other.isSetInstall()) {
      List<Long> __this__install = new ArrayList<Long>(other.install);
      this.install = __this__install;
    }
  }

  public RequirePackageStruct deepCopy() {
    return new RequirePackageStruct(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.android_version = null;
    setRootIsSet(false);
    this.root = false;
    this.pre = null;
    this.install = null;
  }

  public long getId() {
    return this.id;
  }

  public RequirePackageStruct setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public RequirePackageStruct setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getAndroid_version() {
    return this.android_version;
  }

  public RequirePackageStruct setAndroid_version(String android_version) {
    this.android_version = android_version;
    return this;
  }

  public void unsetAndroid_version() {
    this.android_version = null;
  }

  /** Returns true if field android_version is set (has been assigned a value) and false otherwise */
  public boolean isSetAndroid_version() {
    return this.android_version != null;
  }

  public void setAndroid_versionIsSet(boolean value) {
    if (!value) {
      this.android_version = null;
    }
  }

  public boolean isRoot() {
    return this.root;
  }

  public RequirePackageStruct setRoot(boolean root) {
    this.root = root;
    setRootIsSet(true);
    return this;
  }

  public void unsetRoot() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROOT_ISSET_ID);
  }

  /** Returns true if field root is set (has been assigned a value) and false otherwise */
  public boolean isSetRoot() {
    return EncodingUtils.testBit(__isset_bitfield, __ROOT_ISSET_ID);
  }

  public void setRootIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROOT_ISSET_ID, value);
  }

  public int getPreSize() {
    return (this.pre == null) ? 0 : this.pre.size();
  }

  public java.util.Iterator<Long> getPreIterator() {
    return (this.pre == null) ? null : this.pre.iterator();
  }

  public void addToPre(long elem) {
    if (this.pre == null) {
      this.pre = new ArrayList<Long>();
    }
    this.pre.add(elem);
  }

  public List<Long> getPre() {
    return this.pre;
  }

  public RequirePackageStruct setPre(List<Long> pre) {
    this.pre = pre;
    return this;
  }

  public void unsetPre() {
    this.pre = null;
  }

  /** Returns true if field pre is set (has been assigned a value) and false otherwise */
  public boolean isSetPre() {
    return this.pre != null;
  }

  public void setPreIsSet(boolean value) {
    if (!value) {
      this.pre = null;
    }
  }

  public int getInstallSize() {
    return (this.install == null) ? 0 : this.install.size();
  }

  public java.util.Iterator<Long> getInstallIterator() {
    return (this.install == null) ? null : this.install.iterator();
  }

  public void addToInstall(long elem) {
    if (this.install == null) {
      this.install = new ArrayList<Long>();
    }
    this.install.add(elem);
  }

  public List<Long> getInstall() {
    return this.install;
  }

  public RequirePackageStruct setInstall(List<Long> install) {
    this.install = install;
    return this;
  }

  public void unsetInstall() {
    this.install = null;
  }

  /** Returns true if field install is set (has been assigned a value) and false otherwise */
  public boolean isSetInstall() {
    return this.install != null;
  }

  public void setInstallIsSet(boolean value) {
    if (!value) {
      this.install = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case ANDROID_VERSION:
      if (value == null) {
        unsetAndroid_version();
      } else {
        setAndroid_version((String)value);
      }
      break;

    case ROOT:
      if (value == null) {
        unsetRoot();
      } else {
        setRoot((Boolean)value);
      }
      break;

    case PRE:
      if (value == null) {
        unsetPre();
      } else {
        setPre((List<Long>)value);
      }
      break;

    case INSTALL:
      if (value == null) {
        unsetInstall();
      } else {
        setInstall((List<Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case ANDROID_VERSION:
      return getAndroid_version();

    case ROOT:
      return isRoot();

    case PRE:
      return getPre();

    case INSTALL:
      return getInstall();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case ANDROID_VERSION:
      return isSetAndroid_version();
    case ROOT:
      return isSetRoot();
    case PRE:
      return isSetPre();
    case INSTALL:
      return isSetInstall();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RequirePackageStruct)
      return this.equals((RequirePackageStruct)that);
    return false;
  }

  public boolean equals(RequirePackageStruct that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_android_version = true && this.isSetAndroid_version();
    boolean that_present_android_version = true && that.isSetAndroid_version();
    if (this_present_android_version || that_present_android_version) {
      if (!(this_present_android_version && that_present_android_version))
        return false;
      if (!this.android_version.equals(that.android_version))
        return false;
    }

    boolean this_present_root = true;
    boolean that_present_root = true;
    if (this_present_root || that_present_root) {
      if (!(this_present_root && that_present_root))
        return false;
      if (this.root != that.root)
        return false;
    }

    boolean this_present_pre = true && this.isSetPre();
    boolean that_present_pre = true && that.isSetPre();
    if (this_present_pre || that_present_pre) {
      if (!(this_present_pre && that_present_pre))
        return false;
      if (!this.pre.equals(that.pre))
        return false;
    }

    boolean this_present_install = true && this.isSetInstall();
    boolean that_present_install = true && that.isSetInstall();
    if (this_present_install || that_present_install) {
      if (!(this_present_install && that_present_install))
        return false;
      if (!this.install.equals(that.install))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_android_version = true && (isSetAndroid_version());
    list.add(present_android_version);
    if (present_android_version)
      list.add(android_version);

    boolean present_root = true;
    list.add(present_root);
    if (present_root)
      list.add(root);

    boolean present_pre = true && (isSetPre());
    list.add(present_pre);
    if (present_pre)
      list.add(pre);

    boolean present_install = true && (isSetInstall());
    list.add(present_install);
    if (present_install)
      list.add(install);

    return list.hashCode();
  }

  @Override
  public int compareTo(RequirePackageStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAndroid_version()).compareTo(other.isSetAndroid_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAndroid_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.android_version, other.android_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoot()).compareTo(other.isSetRoot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.root, other.root);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPre()).compareTo(other.isSetPre());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPre()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pre, other.pre);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstall()).compareTo(other.isSetInstall());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstall()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.install, other.install);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RequirePackageStruct(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("android_version:");
    if (this.android_version == null) {
      sb.append("null");
    } else {
      sb.append(this.android_version);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("root:");
    sb.append(this.root);
    first = false;
    if (isSetPre()) {
      if (!first) sb.append(", ");
      sb.append("pre:");
      if (this.pre == null) {
        sb.append("null");
      } else {
        sb.append(this.pre);
      }
      first = false;
    }
    if (isSetInstall()) {
      if (!first) sb.append(", ");
      sb.append("install:");
      if (this.install == null) {
        sb.append("null");
      } else {
        sb.append(this.install);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RequirePackageStructStandardSchemeFactory implements SchemeFactory {
    public RequirePackageStructStandardScheme getScheme() {
      return new RequirePackageStructStandardScheme();
    }
  }

  private static class RequirePackageStructStandardScheme extends StandardScheme<RequirePackageStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RequirePackageStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ANDROID_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.android_version = iprot.readString();
              struct.setAndroid_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ROOT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.root = iprot.readBool();
              struct.setRootIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                struct.pre = new ArrayList<Long>(_list36.size);
                long _elem37;
                for (int _i38 = 0; _i38 < _list36.size; ++_i38)
                {
                  _elem37 = iprot.readI64();
                  struct.pre.add(_elem37);
                }
                iprot.readListEnd();
              }
              struct.setPreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INSTALL
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list39 = iprot.readListBegin();
                struct.install = new ArrayList<Long>(_list39.size);
                long _elem40;
                for (int _i41 = 0; _i41 < _list39.size; ++_i41)
                {
                  _elem40 = iprot.readI64();
                  struct.install.add(_elem40);
                }
                iprot.readListEnd();
              }
              struct.setInstallIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RequirePackageStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.android_version != null) {
        oprot.writeFieldBegin(ANDROID_VERSION_FIELD_DESC);
        oprot.writeString(struct.android_version);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ROOT_FIELD_DESC);
      oprot.writeBool(struct.root);
      oprot.writeFieldEnd();
      if (struct.pre != null) {
        if (struct.isSetPre()) {
          oprot.writeFieldBegin(PRE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.pre.size()));
            for (long _iter42 : struct.pre)
            {
              oprot.writeI64(_iter42);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.install != null) {
        if (struct.isSetInstall()) {
          oprot.writeFieldBegin(INSTALL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.install.size()));
            for (long _iter43 : struct.install)
            {
              oprot.writeI64(_iter43);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RequirePackageStructTupleSchemeFactory implements SchemeFactory {
    public RequirePackageStructTupleScheme getScheme() {
      return new RequirePackageStructTupleScheme();
    }
  }

  private static class RequirePackageStructTupleScheme extends TupleScheme<RequirePackageStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RequirePackageStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetAndroid_version()) {
        optionals.set(2);
      }
      if (struct.isSetRoot()) {
        optionals.set(3);
      }
      if (struct.isSetPre()) {
        optionals.set(4);
      }
      if (struct.isSetInstall()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetAndroid_version()) {
        oprot.writeString(struct.android_version);
      }
      if (struct.isSetRoot()) {
        oprot.writeBool(struct.root);
      }
      if (struct.isSetPre()) {
        {
          oprot.writeI32(struct.pre.size());
          for (long _iter44 : struct.pre)
          {
            oprot.writeI64(_iter44);
          }
        }
      }
      if (struct.isSetInstall()) {
        {
          oprot.writeI32(struct.install.size());
          for (long _iter45 : struct.install)
          {
            oprot.writeI64(_iter45);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RequirePackageStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.android_version = iprot.readString();
        struct.setAndroid_versionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.root = iprot.readBool();
        struct.setRootIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list46 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.pre = new ArrayList<Long>(_list46.size);
          long _elem47;
          for (int _i48 = 0; _i48 < _list46.size; ++_i48)
          {
            _elem47 = iprot.readI64();
            struct.pre.add(_elem47);
          }
        }
        struct.setPreIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list49 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.install = new ArrayList<Long>(_list49.size);
          long _elem50;
          for (int _i51 = 0; _i51 < _list49.size; ++_i51)
          {
            _elem50 = iprot.readI64();
            struct.install.add(_elem50);
          }
        }
        struct.setInstallIsSet(true);
      }
    }
  }

}

