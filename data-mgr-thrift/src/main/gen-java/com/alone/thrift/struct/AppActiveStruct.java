/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.alone.thrift.struct;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-08-04")
public class AppActiveStruct implements org.apache.thrift.TBase<AppActiveStruct, AppActiveStruct._Fields>, java.io.Serializable, Cloneable, Comparable<AppActiveStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppActiveStruct");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OPEN_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("open_count", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FLOW_FIELD_DESC = new org.apache.thrift.protocol.TField("flow", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField STAY_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("stay_days", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SHOW_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("show_time", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField OPEN_NETWORK_FIELD_DESC = new org.apache.thrift.protocol.TField("open_network", org.apache.thrift.protocol.TType.BOOL, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AppActiveStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AppActiveStructTupleSchemeFactory());
  }

  private long id; // required
  private String name; // required
  private int open_count; // required
  private int flow; // required
  private int stay_days; // required
  private int show_time; // required
  private boolean open_network; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    OPEN_COUNT((short)3, "open_count"),
    FLOW((short)4, "flow"),
    STAY_DAYS((short)5, "stay_days"),
    SHOW_TIME((short)6, "show_time"),
    OPEN_NETWORK((short)7, "open_network");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // OPEN_COUNT
          return OPEN_COUNT;
        case 4: // FLOW
          return FLOW;
        case 5: // STAY_DAYS
          return STAY_DAYS;
        case 6: // SHOW_TIME
          return SHOW_TIME;
        case 7: // OPEN_NETWORK
          return OPEN_NETWORK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __OPEN_COUNT_ISSET_ID = 1;
  private static final int __FLOW_ISSET_ID = 2;
  private static final int __STAY_DAYS_ISSET_ID = 3;
  private static final int __SHOW_TIME_ISSET_ID = 4;
  private static final int __OPEN_NETWORK_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPEN_COUNT, new org.apache.thrift.meta_data.FieldMetaData("open_count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FLOW, new org.apache.thrift.meta_data.FieldMetaData("flow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STAY_DAYS, new org.apache.thrift.meta_data.FieldMetaData("stay_days", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHOW_TIME, new org.apache.thrift.meta_data.FieldMetaData("show_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPEN_NETWORK, new org.apache.thrift.meta_data.FieldMetaData("open_network", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppActiveStruct.class, metaDataMap);
  }

  public AppActiveStruct() {
  }

  public AppActiveStruct(
    long id,
    String name,
    int open_count,
    int flow,
    int stay_days,
    int show_time,
    boolean open_network)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.open_count = open_count;
    setOpen_countIsSet(true);
    this.flow = flow;
    setFlowIsSet(true);
    this.stay_days = stay_days;
    setStay_daysIsSet(true);
    this.show_time = show_time;
    setShow_timeIsSet(true);
    this.open_network = open_network;
    setOpen_networkIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AppActiveStruct(AppActiveStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.open_count = other.open_count;
    this.flow = other.flow;
    this.stay_days = other.stay_days;
    this.show_time = other.show_time;
    this.open_network = other.open_network;
  }

  public AppActiveStruct deepCopy() {
    return new AppActiveStruct(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    setOpen_countIsSet(false);
    this.open_count = 0;
    setFlowIsSet(false);
    this.flow = 0;
    setStay_daysIsSet(false);
    this.stay_days = 0;
    setShow_timeIsSet(false);
    this.show_time = 0;
    setOpen_networkIsSet(false);
    this.open_network = false;
  }

  public long getId() {
    return this.id;
  }

  public AppActiveStruct setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public AppActiveStruct setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getOpen_count() {
    return this.open_count;
  }

  public AppActiveStruct setOpen_count(int open_count) {
    this.open_count = open_count;
    setOpen_countIsSet(true);
    return this;
  }

  public void unsetOpen_count() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPEN_COUNT_ISSET_ID);
  }

  /** Returns true if field open_count is set (has been assigned a value) and false otherwise */
  public boolean isSetOpen_count() {
    return EncodingUtils.testBit(__isset_bitfield, __OPEN_COUNT_ISSET_ID);
  }

  public void setOpen_countIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPEN_COUNT_ISSET_ID, value);
  }

  public int getFlow() {
    return this.flow;
  }

  public AppActiveStruct setFlow(int flow) {
    this.flow = flow;
    setFlowIsSet(true);
    return this;
  }

  public void unsetFlow() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLOW_ISSET_ID);
  }

  /** Returns true if field flow is set (has been assigned a value) and false otherwise */
  public boolean isSetFlow() {
    return EncodingUtils.testBit(__isset_bitfield, __FLOW_ISSET_ID);
  }

  public void setFlowIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLOW_ISSET_ID, value);
  }

  public int getStay_days() {
    return this.stay_days;
  }

  public AppActiveStruct setStay_days(int stay_days) {
    this.stay_days = stay_days;
    setStay_daysIsSet(true);
    return this;
  }

  public void unsetStay_days() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STAY_DAYS_ISSET_ID);
  }

  /** Returns true if field stay_days is set (has been assigned a value) and false otherwise */
  public boolean isSetStay_days() {
    return EncodingUtils.testBit(__isset_bitfield, __STAY_DAYS_ISSET_ID);
  }

  public void setStay_daysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STAY_DAYS_ISSET_ID, value);
  }

  public int getShow_time() {
    return this.show_time;
  }

  public AppActiveStruct setShow_time(int show_time) {
    this.show_time = show_time;
    setShow_timeIsSet(true);
    return this;
  }

  public void unsetShow_time() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOW_TIME_ISSET_ID);
  }

  /** Returns true if field show_time is set (has been assigned a value) and false otherwise */
  public boolean isSetShow_time() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOW_TIME_ISSET_ID);
  }

  public void setShow_timeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOW_TIME_ISSET_ID, value);
  }

  public boolean isOpen_network() {
    return this.open_network;
  }

  public AppActiveStruct setOpen_network(boolean open_network) {
    this.open_network = open_network;
    setOpen_networkIsSet(true);
    return this;
  }

  public void unsetOpen_network() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPEN_NETWORK_ISSET_ID);
  }

  /** Returns true if field open_network is set (has been assigned a value) and false otherwise */
  public boolean isSetOpen_network() {
    return EncodingUtils.testBit(__isset_bitfield, __OPEN_NETWORK_ISSET_ID);
  }

  public void setOpen_networkIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPEN_NETWORK_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case OPEN_COUNT:
      if (value == null) {
        unsetOpen_count();
      } else {
        setOpen_count((Integer)value);
      }
      break;

    case FLOW:
      if (value == null) {
        unsetFlow();
      } else {
        setFlow((Integer)value);
      }
      break;

    case STAY_DAYS:
      if (value == null) {
        unsetStay_days();
      } else {
        setStay_days((Integer)value);
      }
      break;

    case SHOW_TIME:
      if (value == null) {
        unsetShow_time();
      } else {
        setShow_time((Integer)value);
      }
      break;

    case OPEN_NETWORK:
      if (value == null) {
        unsetOpen_network();
      } else {
        setOpen_network((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case OPEN_COUNT:
      return getOpen_count();

    case FLOW:
      return getFlow();

    case STAY_DAYS:
      return getStay_days();

    case SHOW_TIME:
      return getShow_time();

    case OPEN_NETWORK:
      return isOpen_network();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case OPEN_COUNT:
      return isSetOpen_count();
    case FLOW:
      return isSetFlow();
    case STAY_DAYS:
      return isSetStay_days();
    case SHOW_TIME:
      return isSetShow_time();
    case OPEN_NETWORK:
      return isSetOpen_network();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AppActiveStruct)
      return this.equals((AppActiveStruct)that);
    return false;
  }

  public boolean equals(AppActiveStruct that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_open_count = true;
    boolean that_present_open_count = true;
    if (this_present_open_count || that_present_open_count) {
      if (!(this_present_open_count && that_present_open_count))
        return false;
      if (this.open_count != that.open_count)
        return false;
    }

    boolean this_present_flow = true;
    boolean that_present_flow = true;
    if (this_present_flow || that_present_flow) {
      if (!(this_present_flow && that_present_flow))
        return false;
      if (this.flow != that.flow)
        return false;
    }

    boolean this_present_stay_days = true;
    boolean that_present_stay_days = true;
    if (this_present_stay_days || that_present_stay_days) {
      if (!(this_present_stay_days && that_present_stay_days))
        return false;
      if (this.stay_days != that.stay_days)
        return false;
    }

    boolean this_present_show_time = true;
    boolean that_present_show_time = true;
    if (this_present_show_time || that_present_show_time) {
      if (!(this_present_show_time && that_present_show_time))
        return false;
      if (this.show_time != that.show_time)
        return false;
    }

    boolean this_present_open_network = true;
    boolean that_present_open_network = true;
    if (this_present_open_network || that_present_open_network) {
      if (!(this_present_open_network && that_present_open_network))
        return false;
      if (this.open_network != that.open_network)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_open_count = true;
    list.add(present_open_count);
    if (present_open_count)
      list.add(open_count);

    boolean present_flow = true;
    list.add(present_flow);
    if (present_flow)
      list.add(flow);

    boolean present_stay_days = true;
    list.add(present_stay_days);
    if (present_stay_days)
      list.add(stay_days);

    boolean present_show_time = true;
    list.add(present_show_time);
    if (present_show_time)
      list.add(show_time);

    boolean present_open_network = true;
    list.add(present_open_network);
    if (present_open_network)
      list.add(open_network);

    return list.hashCode();
  }

  @Override
  public int compareTo(AppActiveStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpen_count()).compareTo(other.isSetOpen_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpen_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.open_count, other.open_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlow()).compareTo(other.isSetFlow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flow, other.flow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStay_days()).compareTo(other.isSetStay_days());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStay_days()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stay_days, other.stay_days);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShow_time()).compareTo(other.isSetShow_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShow_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.show_time, other.show_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpen_network()).compareTo(other.isSetOpen_network());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpen_network()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.open_network, other.open_network);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AppActiveStruct(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("open_count:");
    sb.append(this.open_count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("flow:");
    sb.append(this.flow);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stay_days:");
    sb.append(this.stay_days);
    first = false;
    if (!first) sb.append(", ");
    sb.append("show_time:");
    sb.append(this.show_time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("open_network:");
    sb.append(this.open_network);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AppActiveStructStandardSchemeFactory implements SchemeFactory {
    public AppActiveStructStandardScheme getScheme() {
      return new AppActiveStructStandardScheme();
    }
  }

  private static class AppActiveStructStandardScheme extends StandardScheme<AppActiveStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AppActiveStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OPEN_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.open_count = iprot.readI32();
              struct.setOpen_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FLOW
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.flow = iprot.readI32();
              struct.setFlowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STAY_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stay_days = iprot.readI32();
              struct.setStay_daysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SHOW_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.show_time = iprot.readI32();
              struct.setShow_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OPEN_NETWORK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.open_network = iprot.readBool();
              struct.setOpen_networkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AppActiveStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OPEN_COUNT_FIELD_DESC);
      oprot.writeI32(struct.open_count);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FLOW_FIELD_DESC);
      oprot.writeI32(struct.flow);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STAY_DAYS_FIELD_DESC);
      oprot.writeI32(struct.stay_days);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOW_TIME_FIELD_DESC);
      oprot.writeI32(struct.show_time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPEN_NETWORK_FIELD_DESC);
      oprot.writeBool(struct.open_network);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AppActiveStructTupleSchemeFactory implements SchemeFactory {
    public AppActiveStructTupleScheme getScheme() {
      return new AppActiveStructTupleScheme();
    }
  }

  private static class AppActiveStructTupleScheme extends TupleScheme<AppActiveStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AppActiveStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetOpen_count()) {
        optionals.set(2);
      }
      if (struct.isSetFlow()) {
        optionals.set(3);
      }
      if (struct.isSetStay_days()) {
        optionals.set(4);
      }
      if (struct.isSetShow_time()) {
        optionals.set(5);
      }
      if (struct.isSetOpen_network()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetOpen_count()) {
        oprot.writeI32(struct.open_count);
      }
      if (struct.isSetFlow()) {
        oprot.writeI32(struct.flow);
      }
      if (struct.isSetStay_days()) {
        oprot.writeI32(struct.stay_days);
      }
      if (struct.isSetShow_time()) {
        oprot.writeI32(struct.show_time);
      }
      if (struct.isSetOpen_network()) {
        oprot.writeBool(struct.open_network);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AppActiveStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.open_count = iprot.readI32();
        struct.setOpen_countIsSet(true);
      }
      if (incoming.get(3)) {
        struct.flow = iprot.readI32();
        struct.setFlowIsSet(true);
      }
      if (incoming.get(4)) {
        struct.stay_days = iprot.readI32();
        struct.setStay_daysIsSet(true);
      }
      if (incoming.get(5)) {
        struct.show_time = iprot.readI32();
        struct.setShow_timeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.open_network = iprot.readBool();
        struct.setOpen_networkIsSet(true);
      }
    }
  }

}

