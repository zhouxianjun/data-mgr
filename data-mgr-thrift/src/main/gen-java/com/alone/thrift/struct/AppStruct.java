/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.alone.thrift.struct;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-08-04")
public class AppStruct implements org.apache.thrift.TBase<AppStruct, AppStruct._Fields>, java.io.Serializable, Cloneable, Comparable<AppStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppStruct");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ZH_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("zh_name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cp_name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField NETWORK_FIELD_DESC = new org.apache.thrift.protocol.TField("network", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField OPEN_NETWORK_FIELD_DESC = new org.apache.thrift.protocol.TField("open_network", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField MEMO_FIELD_DESC = new org.apache.thrift.protocol.TField("memo", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField REQUIRE_FIELD_DESC = new org.apache.thrift.protocol.TField("require", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField WHITE_FIELD_DESC = new org.apache.thrift.protocol.TField("white", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField BLACK_FIELD_DESC = new org.apache.thrift.protocol.TField("black", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField ACTIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("active_id", org.apache.thrift.protocol.TType.I64, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AppStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AppStructTupleSchemeFactory());
  }

  private long id; // required
  private String name; // required
  private String zh_name; // required
  private String cp_name; // required
  private double price; // required
  private int network; // required
  private boolean open_network; // required
  private String memo; // required
  private boolean require; // required
  private boolean white; // required
  private boolean black; // required
  private long active_id; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    ZH_NAME((short)3, "zh_name"),
    CP_NAME((short)4, "cp_name"),
    PRICE((short)5, "price"),
    NETWORK((short)6, "network"),
    OPEN_NETWORK((short)7, "open_network"),
    MEMO((short)8, "memo"),
    REQUIRE((short)9, "require"),
    WHITE((short)10, "white"),
    BLACK((short)11, "black"),
    ACTIVE_ID((short)12, "active_id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // ZH_NAME
          return ZH_NAME;
        case 4: // CP_NAME
          return CP_NAME;
        case 5: // PRICE
          return PRICE;
        case 6: // NETWORK
          return NETWORK;
        case 7: // OPEN_NETWORK
          return OPEN_NETWORK;
        case 8: // MEMO
          return MEMO;
        case 9: // REQUIRE
          return REQUIRE;
        case 10: // WHITE
          return WHITE;
        case 11: // BLACK
          return BLACK;
        case 12: // ACTIVE_ID
          return ACTIVE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PRICE_ISSET_ID = 1;
  private static final int __NETWORK_ISSET_ID = 2;
  private static final int __OPEN_NETWORK_ISSET_ID = 3;
  private static final int __REQUIRE_ISSET_ID = 4;
  private static final int __WHITE_ISSET_ID = 5;
  private static final int __BLACK_ISSET_ID = 6;
  private static final int __ACTIVE_ID_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ZH_NAME, new org.apache.thrift.meta_data.FieldMetaData("zh_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CP_NAME, new org.apache.thrift.meta_data.FieldMetaData("cp_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NETWORK, new org.apache.thrift.meta_data.FieldMetaData("network", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPEN_NETWORK, new org.apache.thrift.meta_data.FieldMetaData("open_network", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MEMO, new org.apache.thrift.meta_data.FieldMetaData("memo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUIRE, new org.apache.thrift.meta_data.FieldMetaData("require", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.WHITE, new org.apache.thrift.meta_data.FieldMetaData("white", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BLACK, new org.apache.thrift.meta_data.FieldMetaData("black", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ACTIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("active_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppStruct.class, metaDataMap);
  }

  public AppStruct() {
  }

  public AppStruct(
    long id,
    String name,
    String zh_name,
    String cp_name,
    double price,
    int network,
    boolean open_network,
    String memo,
    boolean require,
    boolean white,
    boolean black,
    long active_id)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.zh_name = zh_name;
    this.cp_name = cp_name;
    this.price = price;
    setPriceIsSet(true);
    this.network = network;
    setNetworkIsSet(true);
    this.open_network = open_network;
    setOpen_networkIsSet(true);
    this.memo = memo;
    this.require = require;
    setRequireIsSet(true);
    this.white = white;
    setWhiteIsSet(true);
    this.black = black;
    setBlackIsSet(true);
    this.active_id = active_id;
    setActive_idIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AppStruct(AppStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetZh_name()) {
      this.zh_name = other.zh_name;
    }
    if (other.isSetCp_name()) {
      this.cp_name = other.cp_name;
    }
    this.price = other.price;
    this.network = other.network;
    this.open_network = other.open_network;
    if (other.isSetMemo()) {
      this.memo = other.memo;
    }
    this.require = other.require;
    this.white = other.white;
    this.black = other.black;
    this.active_id = other.active_id;
  }

  public AppStruct deepCopy() {
    return new AppStruct(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.zh_name = null;
    this.cp_name = null;
    setPriceIsSet(false);
    this.price = 0.0;
    setNetworkIsSet(false);
    this.network = 0;
    setOpen_networkIsSet(false);
    this.open_network = false;
    this.memo = null;
    setRequireIsSet(false);
    this.require = false;
    setWhiteIsSet(false);
    this.white = false;
    setBlackIsSet(false);
    this.black = false;
    setActive_idIsSet(false);
    this.active_id = 0;
  }

  public long getId() {
    return this.id;
  }

  public AppStruct setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public AppStruct setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getZh_name() {
    return this.zh_name;
  }

  public AppStruct setZh_name(String zh_name) {
    this.zh_name = zh_name;
    return this;
  }

  public void unsetZh_name() {
    this.zh_name = null;
  }

  /** Returns true if field zh_name is set (has been assigned a value) and false otherwise */
  public boolean isSetZh_name() {
    return this.zh_name != null;
  }

  public void setZh_nameIsSet(boolean value) {
    if (!value) {
      this.zh_name = null;
    }
  }

  public String getCp_name() {
    return this.cp_name;
  }

  public AppStruct setCp_name(String cp_name) {
    this.cp_name = cp_name;
    return this;
  }

  public void unsetCp_name() {
    this.cp_name = null;
  }

  /** Returns true if field cp_name is set (has been assigned a value) and false otherwise */
  public boolean isSetCp_name() {
    return this.cp_name != null;
  }

  public void setCp_nameIsSet(boolean value) {
    if (!value) {
      this.cp_name = null;
    }
  }

  public double getPrice() {
    return this.price;
  }

  public AppStruct setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  public int getNetwork() {
    return this.network;
  }

  public AppStruct setNetwork(int network) {
    this.network = network;
    setNetworkIsSet(true);
    return this;
  }

  public void unsetNetwork() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NETWORK_ISSET_ID);
  }

  /** Returns true if field network is set (has been assigned a value) and false otherwise */
  public boolean isSetNetwork() {
    return EncodingUtils.testBit(__isset_bitfield, __NETWORK_ISSET_ID);
  }

  public void setNetworkIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NETWORK_ISSET_ID, value);
  }

  public boolean isOpen_network() {
    return this.open_network;
  }

  public AppStruct setOpen_network(boolean open_network) {
    this.open_network = open_network;
    setOpen_networkIsSet(true);
    return this;
  }

  public void unsetOpen_network() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPEN_NETWORK_ISSET_ID);
  }

  /** Returns true if field open_network is set (has been assigned a value) and false otherwise */
  public boolean isSetOpen_network() {
    return EncodingUtils.testBit(__isset_bitfield, __OPEN_NETWORK_ISSET_ID);
  }

  public void setOpen_networkIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPEN_NETWORK_ISSET_ID, value);
  }

  public String getMemo() {
    return this.memo;
  }

  public AppStruct setMemo(String memo) {
    this.memo = memo;
    return this;
  }

  public void unsetMemo() {
    this.memo = null;
  }

  /** Returns true if field memo is set (has been assigned a value) and false otherwise */
  public boolean isSetMemo() {
    return this.memo != null;
  }

  public void setMemoIsSet(boolean value) {
    if (!value) {
      this.memo = null;
    }
  }

  public boolean isRequire() {
    return this.require;
  }

  public AppStruct setRequire(boolean require) {
    this.require = require;
    setRequireIsSet(true);
    return this;
  }

  public void unsetRequire() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUIRE_ISSET_ID);
  }

  /** Returns true if field require is set (has been assigned a value) and false otherwise */
  public boolean isSetRequire() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUIRE_ISSET_ID);
  }

  public void setRequireIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUIRE_ISSET_ID, value);
  }

  public boolean isWhite() {
    return this.white;
  }

  public AppStruct setWhite(boolean white) {
    this.white = white;
    setWhiteIsSet(true);
    return this;
  }

  public void unsetWhite() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WHITE_ISSET_ID);
  }

  /** Returns true if field white is set (has been assigned a value) and false otherwise */
  public boolean isSetWhite() {
    return EncodingUtils.testBit(__isset_bitfield, __WHITE_ISSET_ID);
  }

  public void setWhiteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WHITE_ISSET_ID, value);
  }

  public boolean isBlack() {
    return this.black;
  }

  public AppStruct setBlack(boolean black) {
    this.black = black;
    setBlackIsSet(true);
    return this;
  }

  public void unsetBlack() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLACK_ISSET_ID);
  }

  /** Returns true if field black is set (has been assigned a value) and false otherwise */
  public boolean isSetBlack() {
    return EncodingUtils.testBit(__isset_bitfield, __BLACK_ISSET_ID);
  }

  public void setBlackIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLACK_ISSET_ID, value);
  }

  public long getActive_id() {
    return this.active_id;
  }

  public AppStruct setActive_id(long active_id) {
    this.active_id = active_id;
    setActive_idIsSet(true);
    return this;
  }

  public void unsetActive_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVE_ID_ISSET_ID);
  }

  /** Returns true if field active_id is set (has been assigned a value) and false otherwise */
  public boolean isSetActive_id() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVE_ID_ISSET_ID);
  }

  public void setActive_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVE_ID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case ZH_NAME:
      if (value == null) {
        unsetZh_name();
      } else {
        setZh_name((String)value);
      }
      break;

    case CP_NAME:
      if (value == null) {
        unsetCp_name();
      } else {
        setCp_name((String)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Double)value);
      }
      break;

    case NETWORK:
      if (value == null) {
        unsetNetwork();
      } else {
        setNetwork((Integer)value);
      }
      break;

    case OPEN_NETWORK:
      if (value == null) {
        unsetOpen_network();
      } else {
        setOpen_network((Boolean)value);
      }
      break;

    case MEMO:
      if (value == null) {
        unsetMemo();
      } else {
        setMemo((String)value);
      }
      break;

    case REQUIRE:
      if (value == null) {
        unsetRequire();
      } else {
        setRequire((Boolean)value);
      }
      break;

    case WHITE:
      if (value == null) {
        unsetWhite();
      } else {
        setWhite((Boolean)value);
      }
      break;

    case BLACK:
      if (value == null) {
        unsetBlack();
      } else {
        setBlack((Boolean)value);
      }
      break;

    case ACTIVE_ID:
      if (value == null) {
        unsetActive_id();
      } else {
        setActive_id((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case ZH_NAME:
      return getZh_name();

    case CP_NAME:
      return getCp_name();

    case PRICE:
      return getPrice();

    case NETWORK:
      return getNetwork();

    case OPEN_NETWORK:
      return isOpen_network();

    case MEMO:
      return getMemo();

    case REQUIRE:
      return isRequire();

    case WHITE:
      return isWhite();

    case BLACK:
      return isBlack();

    case ACTIVE_ID:
      return getActive_id();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case ZH_NAME:
      return isSetZh_name();
    case CP_NAME:
      return isSetCp_name();
    case PRICE:
      return isSetPrice();
    case NETWORK:
      return isSetNetwork();
    case OPEN_NETWORK:
      return isSetOpen_network();
    case MEMO:
      return isSetMemo();
    case REQUIRE:
      return isSetRequire();
    case WHITE:
      return isSetWhite();
    case BLACK:
      return isSetBlack();
    case ACTIVE_ID:
      return isSetActive_id();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AppStruct)
      return this.equals((AppStruct)that);
    return false;
  }

  public boolean equals(AppStruct that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_zh_name = true && this.isSetZh_name();
    boolean that_present_zh_name = true && that.isSetZh_name();
    if (this_present_zh_name || that_present_zh_name) {
      if (!(this_present_zh_name && that_present_zh_name))
        return false;
      if (!this.zh_name.equals(that.zh_name))
        return false;
    }

    boolean this_present_cp_name = true && this.isSetCp_name();
    boolean that_present_cp_name = true && that.isSetCp_name();
    if (this_present_cp_name || that_present_cp_name) {
      if (!(this_present_cp_name && that_present_cp_name))
        return false;
      if (!this.cp_name.equals(that.cp_name))
        return false;
    }

    boolean this_present_price = true;
    boolean that_present_price = true;
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_network = true;
    boolean that_present_network = true;
    if (this_present_network || that_present_network) {
      if (!(this_present_network && that_present_network))
        return false;
      if (this.network != that.network)
        return false;
    }

    boolean this_present_open_network = true;
    boolean that_present_open_network = true;
    if (this_present_open_network || that_present_open_network) {
      if (!(this_present_open_network && that_present_open_network))
        return false;
      if (this.open_network != that.open_network)
        return false;
    }

    boolean this_present_memo = true && this.isSetMemo();
    boolean that_present_memo = true && that.isSetMemo();
    if (this_present_memo || that_present_memo) {
      if (!(this_present_memo && that_present_memo))
        return false;
      if (!this.memo.equals(that.memo))
        return false;
    }

    boolean this_present_require = true;
    boolean that_present_require = true;
    if (this_present_require || that_present_require) {
      if (!(this_present_require && that_present_require))
        return false;
      if (this.require != that.require)
        return false;
    }

    boolean this_present_white = true;
    boolean that_present_white = true;
    if (this_present_white || that_present_white) {
      if (!(this_present_white && that_present_white))
        return false;
      if (this.white != that.white)
        return false;
    }

    boolean this_present_black = true;
    boolean that_present_black = true;
    if (this_present_black || that_present_black) {
      if (!(this_present_black && that_present_black))
        return false;
      if (this.black != that.black)
        return false;
    }

    boolean this_present_active_id = true;
    boolean that_present_active_id = true;
    if (this_present_active_id || that_present_active_id) {
      if (!(this_present_active_id && that_present_active_id))
        return false;
      if (this.active_id != that.active_id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_zh_name = true && (isSetZh_name());
    list.add(present_zh_name);
    if (present_zh_name)
      list.add(zh_name);

    boolean present_cp_name = true && (isSetCp_name());
    list.add(present_cp_name);
    if (present_cp_name)
      list.add(cp_name);

    boolean present_price = true;
    list.add(present_price);
    if (present_price)
      list.add(price);

    boolean present_network = true;
    list.add(present_network);
    if (present_network)
      list.add(network);

    boolean present_open_network = true;
    list.add(present_open_network);
    if (present_open_network)
      list.add(open_network);

    boolean present_memo = true && (isSetMemo());
    list.add(present_memo);
    if (present_memo)
      list.add(memo);

    boolean present_require = true;
    list.add(present_require);
    if (present_require)
      list.add(require);

    boolean present_white = true;
    list.add(present_white);
    if (present_white)
      list.add(white);

    boolean present_black = true;
    list.add(present_black);
    if (present_black)
      list.add(black);

    boolean present_active_id = true;
    list.add(present_active_id);
    if (present_active_id)
      list.add(active_id);

    return list.hashCode();
  }

  @Override
  public int compareTo(AppStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZh_name()).compareTo(other.isSetZh_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZh_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zh_name, other.zh_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCp_name()).compareTo(other.isSetCp_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCp_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cp_name, other.cp_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNetwork()).compareTo(other.isSetNetwork());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetwork()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.network, other.network);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpen_network()).compareTo(other.isSetOpen_network());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpen_network()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.open_network, other.open_network);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemo()).compareTo(other.isSetMemo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memo, other.memo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequire()).compareTo(other.isSetRequire());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequire()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.require, other.require);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWhite()).compareTo(other.isSetWhite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWhite()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.white, other.white);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlack()).compareTo(other.isSetBlack());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlack()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.black, other.black);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActive_id()).compareTo(other.isSetActive_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActive_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.active_id, other.active_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AppStruct(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("zh_name:");
    if (this.zh_name == null) {
      sb.append("null");
    } else {
      sb.append(this.zh_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cp_name:");
    if (this.cp_name == null) {
      sb.append("null");
    } else {
      sb.append(this.cp_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    sb.append(this.price);
    first = false;
    if (!first) sb.append(", ");
    sb.append("network:");
    sb.append(this.network);
    first = false;
    if (!first) sb.append(", ");
    sb.append("open_network:");
    sb.append(this.open_network);
    first = false;
    if (!first) sb.append(", ");
    sb.append("memo:");
    if (this.memo == null) {
      sb.append("null");
    } else {
      sb.append(this.memo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("require:");
    sb.append(this.require);
    first = false;
    if (!first) sb.append(", ");
    sb.append("white:");
    sb.append(this.white);
    first = false;
    if (!first) sb.append(", ");
    sb.append("black:");
    sb.append(this.black);
    first = false;
    if (!first) sb.append(", ");
    sb.append("active_id:");
    sb.append(this.active_id);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AppStructStandardSchemeFactory implements SchemeFactory {
    public AppStructStandardScheme getScheme() {
      return new AppStructStandardScheme();
    }
  }

  private static class AppStructStandardScheme extends StandardScheme<AppStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AppStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ZH_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.zh_name = iprot.readString();
              struct.setZh_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cp_name = iprot.readString();
              struct.setCp_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.price = iprot.readDouble();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NETWORK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.network = iprot.readI32();
              struct.setNetworkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OPEN_NETWORK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.open_network = iprot.readBool();
              struct.setOpen_networkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MEMO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.memo = iprot.readString();
              struct.setMemoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REQUIRE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.require = iprot.readBool();
              struct.setRequireIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // WHITE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.white = iprot.readBool();
              struct.setWhiteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BLACK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.black = iprot.readBool();
              struct.setBlackIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ACTIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.active_id = iprot.readI64();
              struct.setActive_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AppStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.zh_name != null) {
        oprot.writeFieldBegin(ZH_NAME_FIELD_DESC);
        oprot.writeString(struct.zh_name);
        oprot.writeFieldEnd();
      }
      if (struct.cp_name != null) {
        oprot.writeFieldBegin(CP_NAME_FIELD_DESC);
        oprot.writeString(struct.cp_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRICE_FIELD_DESC);
      oprot.writeDouble(struct.price);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NETWORK_FIELD_DESC);
      oprot.writeI32(struct.network);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPEN_NETWORK_FIELD_DESC);
      oprot.writeBool(struct.open_network);
      oprot.writeFieldEnd();
      if (struct.memo != null) {
        oprot.writeFieldBegin(MEMO_FIELD_DESC);
        oprot.writeString(struct.memo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REQUIRE_FIELD_DESC);
      oprot.writeBool(struct.require);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WHITE_FIELD_DESC);
      oprot.writeBool(struct.white);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BLACK_FIELD_DESC);
      oprot.writeBool(struct.black);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTIVE_ID_FIELD_DESC);
      oprot.writeI64(struct.active_id);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AppStructTupleSchemeFactory implements SchemeFactory {
    public AppStructTupleScheme getScheme() {
      return new AppStructTupleScheme();
    }
  }

  private static class AppStructTupleScheme extends TupleScheme<AppStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AppStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetZh_name()) {
        optionals.set(2);
      }
      if (struct.isSetCp_name()) {
        optionals.set(3);
      }
      if (struct.isSetPrice()) {
        optionals.set(4);
      }
      if (struct.isSetNetwork()) {
        optionals.set(5);
      }
      if (struct.isSetOpen_network()) {
        optionals.set(6);
      }
      if (struct.isSetMemo()) {
        optionals.set(7);
      }
      if (struct.isSetRequire()) {
        optionals.set(8);
      }
      if (struct.isSetWhite()) {
        optionals.set(9);
      }
      if (struct.isSetBlack()) {
        optionals.set(10);
      }
      if (struct.isSetActive_id()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetZh_name()) {
        oprot.writeString(struct.zh_name);
      }
      if (struct.isSetCp_name()) {
        oprot.writeString(struct.cp_name);
      }
      if (struct.isSetPrice()) {
        oprot.writeDouble(struct.price);
      }
      if (struct.isSetNetwork()) {
        oprot.writeI32(struct.network);
      }
      if (struct.isSetOpen_network()) {
        oprot.writeBool(struct.open_network);
      }
      if (struct.isSetMemo()) {
        oprot.writeString(struct.memo);
      }
      if (struct.isSetRequire()) {
        oprot.writeBool(struct.require);
      }
      if (struct.isSetWhite()) {
        oprot.writeBool(struct.white);
      }
      if (struct.isSetBlack()) {
        oprot.writeBool(struct.black);
      }
      if (struct.isSetActive_id()) {
        oprot.writeI64(struct.active_id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AppStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.zh_name = iprot.readString();
        struct.setZh_nameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cp_name = iprot.readString();
        struct.setCp_nameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.price = iprot.readDouble();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.network = iprot.readI32();
        struct.setNetworkIsSet(true);
      }
      if (incoming.get(6)) {
        struct.open_network = iprot.readBool();
        struct.setOpen_networkIsSet(true);
      }
      if (incoming.get(7)) {
        struct.memo = iprot.readString();
        struct.setMemoIsSet(true);
      }
      if (incoming.get(8)) {
        struct.require = iprot.readBool();
        struct.setRequireIsSet(true);
      }
      if (incoming.get(9)) {
        struct.white = iprot.readBool();
        struct.setWhiteIsSet(true);
      }
      if (incoming.get(10)) {
        struct.black = iprot.readBool();
        struct.setBlackIsSet(true);
      }
      if (incoming.get(11)) {
        struct.active_id = iprot.readI64();
        struct.setActive_idIsSet(true);
      }
    }
  }

}

