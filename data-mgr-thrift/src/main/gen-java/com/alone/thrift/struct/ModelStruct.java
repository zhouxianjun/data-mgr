/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.alone.thrift.struct;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-08-04")
public class ModelStruct implements org.apache.thrift.TBase<ModelStruct, ModelStruct._Fields>, java.io.Serializable, Cloneable, Comparable<ModelStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ModelStruct");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField BRAND_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brand_id", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("model_id", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField VERSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("version_id", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField BASE_VERSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("base_version_id", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ModelStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ModelStructTupleSchemeFactory());
  }

  private long id; // required
  private long brand_id; // required
  private long model_id; // required
  private long version_id; // required
  private long base_version_id; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    BRAND_ID((short)2, "brand_id"),
    MODEL_ID((short)3, "model_id"),
    VERSION_ID((short)4, "version_id"),
    BASE_VERSION_ID((short)5, "base_version_id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // BRAND_ID
          return BRAND_ID;
        case 3: // MODEL_ID
          return MODEL_ID;
        case 4: // VERSION_ID
          return VERSION_ID;
        case 5: // BASE_VERSION_ID
          return BASE_VERSION_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __BRAND_ID_ISSET_ID = 1;
  private static final int __MODEL_ID_ISSET_ID = 2;
  private static final int __VERSION_ID_ISSET_ID = 3;
  private static final int __BASE_VERSION_ID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BRAND_ID, new org.apache.thrift.meta_data.FieldMetaData("brand_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("model_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VERSION_ID, new org.apache.thrift.meta_data.FieldMetaData("version_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BASE_VERSION_ID, new org.apache.thrift.meta_data.FieldMetaData("base_version_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ModelStruct.class, metaDataMap);
  }

  public ModelStruct() {
  }

  public ModelStruct(
    long id,
    long brand_id,
    long model_id,
    long version_id,
    long base_version_id)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.brand_id = brand_id;
    setBrand_idIsSet(true);
    this.model_id = model_id;
    setModel_idIsSet(true);
    this.version_id = version_id;
    setVersion_idIsSet(true);
    this.base_version_id = base_version_id;
    setBase_version_idIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ModelStruct(ModelStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.brand_id = other.brand_id;
    this.model_id = other.model_id;
    this.version_id = other.version_id;
    this.base_version_id = other.base_version_id;
  }

  public ModelStruct deepCopy() {
    return new ModelStruct(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setBrand_idIsSet(false);
    this.brand_id = 0;
    setModel_idIsSet(false);
    this.model_id = 0;
    setVersion_idIsSet(false);
    this.version_id = 0;
    setBase_version_idIsSet(false);
    this.base_version_id = 0;
  }

  public long getId() {
    return this.id;
  }

  public ModelStruct setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getBrand_id() {
    return this.brand_id;
  }

  public ModelStruct setBrand_id(long brand_id) {
    this.brand_id = brand_id;
    setBrand_idIsSet(true);
    return this;
  }

  public void unsetBrand_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BRAND_ID_ISSET_ID);
  }

  /** Returns true if field brand_id is set (has been assigned a value) and false otherwise */
  public boolean isSetBrand_id() {
    return EncodingUtils.testBit(__isset_bitfield, __BRAND_ID_ISSET_ID);
  }

  public void setBrand_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BRAND_ID_ISSET_ID, value);
  }

  public long getModel_id() {
    return this.model_id;
  }

  public ModelStruct setModel_id(long model_id) {
    this.model_id = model_id;
    setModel_idIsSet(true);
    return this;
  }

  public void unsetModel_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODEL_ID_ISSET_ID);
  }

  /** Returns true if field model_id is set (has been assigned a value) and false otherwise */
  public boolean isSetModel_id() {
    return EncodingUtils.testBit(__isset_bitfield, __MODEL_ID_ISSET_ID);
  }

  public void setModel_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODEL_ID_ISSET_ID, value);
  }

  public long getVersion_id() {
    return this.version_id;
  }

  public ModelStruct setVersion_id(long version_id) {
    this.version_id = version_id;
    setVersion_idIsSet(true);
    return this;
  }

  public void unsetVersion_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ID_ISSET_ID);
  }

  /** Returns true if field version_id is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion_id() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ID_ISSET_ID);
  }

  public void setVersion_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ID_ISSET_ID, value);
  }

  public long getBase_version_id() {
    return this.base_version_id;
  }

  public ModelStruct setBase_version_id(long base_version_id) {
    this.base_version_id = base_version_id;
    setBase_version_idIsSet(true);
    return this;
  }

  public void unsetBase_version_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BASE_VERSION_ID_ISSET_ID);
  }

  /** Returns true if field base_version_id is set (has been assigned a value) and false otherwise */
  public boolean isSetBase_version_id() {
    return EncodingUtils.testBit(__isset_bitfield, __BASE_VERSION_ID_ISSET_ID);
  }

  public void setBase_version_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BASE_VERSION_ID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case BRAND_ID:
      if (value == null) {
        unsetBrand_id();
      } else {
        setBrand_id((Long)value);
      }
      break;

    case MODEL_ID:
      if (value == null) {
        unsetModel_id();
      } else {
        setModel_id((Long)value);
      }
      break;

    case VERSION_ID:
      if (value == null) {
        unsetVersion_id();
      } else {
        setVersion_id((Long)value);
      }
      break;

    case BASE_VERSION_ID:
      if (value == null) {
        unsetBase_version_id();
      } else {
        setBase_version_id((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case BRAND_ID:
      return getBrand_id();

    case MODEL_ID:
      return getModel_id();

    case VERSION_ID:
      return getVersion_id();

    case BASE_VERSION_ID:
      return getBase_version_id();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case BRAND_ID:
      return isSetBrand_id();
    case MODEL_ID:
      return isSetModel_id();
    case VERSION_ID:
      return isSetVersion_id();
    case BASE_VERSION_ID:
      return isSetBase_version_id();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ModelStruct)
      return this.equals((ModelStruct)that);
    return false;
  }

  public boolean equals(ModelStruct that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_brand_id = true;
    boolean that_present_brand_id = true;
    if (this_present_brand_id || that_present_brand_id) {
      if (!(this_present_brand_id && that_present_brand_id))
        return false;
      if (this.brand_id != that.brand_id)
        return false;
    }

    boolean this_present_model_id = true;
    boolean that_present_model_id = true;
    if (this_present_model_id || that_present_model_id) {
      if (!(this_present_model_id && that_present_model_id))
        return false;
      if (this.model_id != that.model_id)
        return false;
    }

    boolean this_present_version_id = true;
    boolean that_present_version_id = true;
    if (this_present_version_id || that_present_version_id) {
      if (!(this_present_version_id && that_present_version_id))
        return false;
      if (this.version_id != that.version_id)
        return false;
    }

    boolean this_present_base_version_id = true;
    boolean that_present_base_version_id = true;
    if (this_present_base_version_id || that_present_base_version_id) {
      if (!(this_present_base_version_id && that_present_base_version_id))
        return false;
      if (this.base_version_id != that.base_version_id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_brand_id = true;
    list.add(present_brand_id);
    if (present_brand_id)
      list.add(brand_id);

    boolean present_model_id = true;
    list.add(present_model_id);
    if (present_model_id)
      list.add(model_id);

    boolean present_version_id = true;
    list.add(present_version_id);
    if (present_version_id)
      list.add(version_id);

    boolean present_base_version_id = true;
    list.add(present_base_version_id);
    if (present_base_version_id)
      list.add(base_version_id);

    return list.hashCode();
  }

  @Override
  public int compareTo(ModelStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrand_id()).compareTo(other.isSetBrand_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrand_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brand_id, other.brand_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModel_id()).compareTo(other.isSetModel_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModel_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model_id, other.model_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion_id()).compareTo(other.isSetVersion_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version_id, other.version_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBase_version_id()).compareTo(other.isSetBase_version_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBase_version_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.base_version_id, other.base_version_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ModelStruct(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("brand_id:");
    sb.append(this.brand_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("model_id:");
    sb.append(this.model_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("version_id:");
    sb.append(this.version_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("base_version_id:");
    sb.append(this.base_version_id);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ModelStructStandardSchemeFactory implements SchemeFactory {
    public ModelStructStandardScheme getScheme() {
      return new ModelStructStandardScheme();
    }
  }

  private static class ModelStructStandardScheme extends StandardScheme<ModelStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ModelStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BRAND_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.brand_id = iprot.readI64();
              struct.setBrand_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MODEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.model_id = iprot.readI64();
              struct.setModel_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VERSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.version_id = iprot.readI64();
              struct.setVersion_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BASE_VERSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.base_version_id = iprot.readI64();
              struct.setBase_version_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ModelStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BRAND_ID_FIELD_DESC);
      oprot.writeI64(struct.brand_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
      oprot.writeI64(struct.model_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VERSION_ID_FIELD_DESC);
      oprot.writeI64(struct.version_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BASE_VERSION_ID_FIELD_DESC);
      oprot.writeI64(struct.base_version_id);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ModelStructTupleSchemeFactory implements SchemeFactory {
    public ModelStructTupleScheme getScheme() {
      return new ModelStructTupleScheme();
    }
  }

  private static class ModelStructTupleScheme extends TupleScheme<ModelStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ModelStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetBrand_id()) {
        optionals.set(1);
      }
      if (struct.isSetModel_id()) {
        optionals.set(2);
      }
      if (struct.isSetVersion_id()) {
        optionals.set(3);
      }
      if (struct.isSetBase_version_id()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetBrand_id()) {
        oprot.writeI64(struct.brand_id);
      }
      if (struct.isSetModel_id()) {
        oprot.writeI64(struct.model_id);
      }
      if (struct.isSetVersion_id()) {
        oprot.writeI64(struct.version_id);
      }
      if (struct.isSetBase_version_id()) {
        oprot.writeI64(struct.base_version_id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ModelStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.brand_id = iprot.readI64();
        struct.setBrand_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.model_id = iprot.readI64();
        struct.setModel_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.version_id = iprot.readI64();
        struct.setVersion_idIsSet(true);
      }
      if (incoming.get(4)) {
        struct.base_version_id = iprot.readI64();
        struct.setBase_version_idIsSet(true);
      }
    }
  }

}

