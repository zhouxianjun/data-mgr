/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.alone.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-08-04")
public class UserRefService {

  public interface Iface {

    public boolean setRef(long user, List<Long> refs, int type) throws com.alone.thrift.struct.InvalidOperation, org.apache.thrift.TException;

    public boolean setRefs(long user, List<Long> box, List<Long> app_package, List<Long> require_package, List<Long> app_white, List<Long> install_active) throws com.alone.thrift.struct.InvalidOperation, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void setRef(long user, List<Long> refs, int type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setRefs(long user, List<Long> box, List<Long> app_package, List<Long> require_package, List<Long> app_white, List<Long> install_active, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean setRef(long user, List<Long> refs, int type) throws com.alone.thrift.struct.InvalidOperation, org.apache.thrift.TException
    {
      send_setRef(user, refs, type);
      return recv_setRef();
    }

    public void send_setRef(long user, List<Long> refs, int type) throws org.apache.thrift.TException
    {
      setRef_args args = new setRef_args();
      args.setUser(user);
      args.setRefs(refs);
      args.setType(type);
      sendBase("setRef", args);
    }

    public boolean recv_setRef() throws com.alone.thrift.struct.InvalidOperation, org.apache.thrift.TException
    {
      setRef_result result = new setRef_result();
      receiveBase(result, "setRef");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setRef failed: unknown result");
    }

    public boolean setRefs(long user, List<Long> box, List<Long> app_package, List<Long> require_package, List<Long> app_white, List<Long> install_active) throws com.alone.thrift.struct.InvalidOperation, org.apache.thrift.TException
    {
      send_setRefs(user, box, app_package, require_package, app_white, install_active);
      return recv_setRefs();
    }

    public void send_setRefs(long user, List<Long> box, List<Long> app_package, List<Long> require_package, List<Long> app_white, List<Long> install_active) throws org.apache.thrift.TException
    {
      setRefs_args args = new setRefs_args();
      args.setUser(user);
      args.setBox(box);
      args.setApp_package(app_package);
      args.setRequire_package(require_package);
      args.setApp_white(app_white);
      args.setInstall_active(install_active);
      sendBase("setRefs", args);
    }

    public boolean recv_setRefs() throws com.alone.thrift.struct.InvalidOperation, org.apache.thrift.TException
    {
      setRefs_result result = new setRefs_result();
      receiveBase(result, "setRefs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setRefs failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void setRef(long user, List<Long> refs, int type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setRef_call method_call = new setRef_call(user, refs, type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setRef_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long user;
      private List<Long> refs;
      private int type;
      public setRef_call(long user, List<Long> refs, int type, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user = user;
        this.refs = refs;
        this.type = type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setRef", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setRef_args args = new setRef_args();
        args.setUser(user);
        args.setRefs(refs);
        args.setType(type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws com.alone.thrift.struct.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setRef();
      }
    }

    public void setRefs(long user, List<Long> box, List<Long> app_package, List<Long> require_package, List<Long> app_white, List<Long> install_active, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setRefs_call method_call = new setRefs_call(user, box, app_package, require_package, app_white, install_active, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setRefs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long user;
      private List<Long> box;
      private List<Long> app_package;
      private List<Long> require_package;
      private List<Long> app_white;
      private List<Long> install_active;
      public setRefs_call(long user, List<Long> box, List<Long> app_package, List<Long> require_package, List<Long> app_white, List<Long> install_active, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user = user;
        this.box = box;
        this.app_package = app_package;
        this.require_package = require_package;
        this.app_white = app_white;
        this.install_active = install_active;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setRefs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setRefs_args args = new setRefs_args();
        args.setUser(user);
        args.setBox(box);
        args.setApp_package(app_package);
        args.setRequire_package(require_package);
        args.setApp_white(app_white);
        args.setInstall_active(install_active);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws com.alone.thrift.struct.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setRefs();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("setRef", new setRef());
      processMap.put("setRefs", new setRefs());
      return processMap;
    }

    public static class setRef<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setRef_args> {
      public setRef() {
        super("setRef");
      }

      public setRef_args getEmptyArgsInstance() {
        return new setRef_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setRef_result getResult(I iface, setRef_args args) throws org.apache.thrift.TException {
        setRef_result result = new setRef_result();
        try {
          result.success = iface.setRef(args.user, args.refs, args.type);
          result.setSuccessIsSet(true);
        } catch (com.alone.thrift.struct.InvalidOperation ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class setRefs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setRefs_args> {
      public setRefs() {
        super("setRefs");
      }

      public setRefs_args getEmptyArgsInstance() {
        return new setRefs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setRefs_result getResult(I iface, setRefs_args args) throws org.apache.thrift.TException {
        setRefs_result result = new setRefs_result();
        try {
          result.success = iface.setRefs(args.user, args.box, args.app_package, args.require_package, args.app_white, args.install_active);
          result.setSuccessIsSet(true);
        } catch (com.alone.thrift.struct.InvalidOperation ex) {
          result.ex = ex;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("setRef", new setRef());
      processMap.put("setRefs", new setRefs());
      return processMap;
    }

    public static class setRef<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setRef_args, Boolean> {
      public setRef() {
        super("setRef");
      }

      public setRef_args getEmptyArgsInstance() {
        return new setRef_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            setRef_result result = new setRef_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setRef_result result = new setRef_result();
            if (e instanceof com.alone.thrift.struct.InvalidOperation) {
                        result.ex = (com.alone.thrift.struct.InvalidOperation) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setRef_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.setRef(args.user, args.refs, args.type,resultHandler);
      }
    }

    public static class setRefs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setRefs_args, Boolean> {
      public setRefs() {
        super("setRefs");
      }

      public setRefs_args getEmptyArgsInstance() {
        return new setRefs_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            setRefs_result result = new setRefs_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setRefs_result result = new setRefs_result();
            if (e instanceof com.alone.thrift.struct.InvalidOperation) {
                        result.ex = (com.alone.thrift.struct.InvalidOperation) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setRefs_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.setRefs(args.user, args.box, args.app_package, args.require_package, args.app_white, args.install_active,resultHandler);
      }
    }

  }

  public static class setRef_args implements org.apache.thrift.TBase<setRef_args, setRef_args._Fields>, java.io.Serializable, Cloneable, Comparable<setRef_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setRef_args");

    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField REFS_FIELD_DESC = new org.apache.thrift.protocol.TField("refs", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setRef_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setRef_argsTupleSchemeFactory());
    }

    private long user; // required
    private List<Long> refs; // required
    private int type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER((short)1, "user"),
      REFS((short)2, "refs"),
      TYPE((short)3, "type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER
            return USER;
          case 2: // REFS
            return REFS;
          case 3: // TYPE
            return TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USER_ISSET_ID = 0;
    private static final int __TYPE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.REFS, new org.apache.thrift.meta_data.FieldMetaData("refs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setRef_args.class, metaDataMap);
    }

    public setRef_args() {
    }

    public setRef_args(
      long user,
      List<Long> refs,
      int type)
    {
      this();
      this.user = user;
      setUserIsSet(true);
      this.refs = refs;
      this.type = type;
      setTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setRef_args(setRef_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.user = other.user;
      if (other.isSetRefs()) {
        List<Long> __this__refs = new ArrayList<Long>(other.refs);
        this.refs = __this__refs;
      }
      this.type = other.type;
    }

    public setRef_args deepCopy() {
      return new setRef_args(this);
    }

    @Override
    public void clear() {
      setUserIsSet(false);
      this.user = 0;
      this.refs = null;
      setTypeIsSet(false);
      this.type = 0;
    }

    public long getUser() {
      return this.user;
    }

    public setRef_args setUser(long user) {
      this.user = user;
      setUserIsSet(true);
      return this;
    }

    public void unsetUser() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USER_ISSET_ID);
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return EncodingUtils.testBit(__isset_bitfield, __USER_ISSET_ID);
    }

    public void setUserIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USER_ISSET_ID, value);
    }

    public int getRefsSize() {
      return (this.refs == null) ? 0 : this.refs.size();
    }

    public java.util.Iterator<Long> getRefsIterator() {
      return (this.refs == null) ? null : this.refs.iterator();
    }

    public void addToRefs(long elem) {
      if (this.refs == null) {
        this.refs = new ArrayList<Long>();
      }
      this.refs.add(elem);
    }

    public List<Long> getRefs() {
      return this.refs;
    }

    public setRef_args setRefs(List<Long> refs) {
      this.refs = refs;
      return this;
    }

    public void unsetRefs() {
      this.refs = null;
    }

    /** Returns true if field refs is set (has been assigned a value) and false otherwise */
    public boolean isSetRefs() {
      return this.refs != null;
    }

    public void setRefsIsSet(boolean value) {
      if (!value) {
        this.refs = null;
      }
    }

    public int getType() {
      return this.type;
    }

    public setRef_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((Long)value);
        }
        break;

      case REFS:
        if (value == null) {
          unsetRefs();
        } else {
          setRefs((List<Long>)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER:
        return getUser();

      case REFS:
        return getRefs();

      case TYPE:
        return getType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER:
        return isSetUser();
      case REFS:
        return isSetRefs();
      case TYPE:
        return isSetType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setRef_args)
        return this.equals((setRef_args)that);
      return false;
    }

    public boolean equals(setRef_args that) {
      if (that == null)
        return false;

      boolean this_present_user = true;
      boolean that_present_user = true;
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (this.user != that.user)
          return false;
      }

      boolean this_present_refs = true && this.isSetRefs();
      boolean that_present_refs = true && that.isSetRefs();
      if (this_present_refs || that_present_refs) {
        if (!(this_present_refs && that_present_refs))
          return false;
        if (!this.refs.equals(that.refs))
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_user = true;
      list.add(present_user);
      if (present_user)
        list.add(user);

      boolean present_refs = true && (isSetRefs());
      list.add(present_refs);
      if (present_refs)
        list.add(refs);

      boolean present_type = true;
      list.add(present_type);
      if (present_type)
        list.add(type);

      return list.hashCode();
    }

    @Override
    public int compareTo(setRef_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRefs()).compareTo(other.isSetRefs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRefs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refs, other.refs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setRef_args(");
      boolean first = true;

      sb.append("user:");
      sb.append(this.user);
      first = false;
      if (!first) sb.append(", ");
      sb.append("refs:");
      if (this.refs == null) {
        sb.append("null");
      } else {
        sb.append(this.refs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setRef_argsStandardSchemeFactory implements SchemeFactory {
      public setRef_argsStandardScheme getScheme() {
        return new setRef_argsStandardScheme();
      }
    }

    private static class setRef_argsStandardScheme extends StandardScheme<setRef_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setRef_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.user = iprot.readI64();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REFS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.refs = new ArrayList<Long>(_list0.size);
                  long _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readI64();
                    struct.refs.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setRefsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setRef_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeI64(struct.user);
        oprot.writeFieldEnd();
        if (struct.refs != null) {
          oprot.writeFieldBegin(REFS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.refs.size()));
            for (long _iter3 : struct.refs)
            {
              oprot.writeI64(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setRef_argsTupleSchemeFactory implements SchemeFactory {
      public setRef_argsTupleScheme getScheme() {
        return new setRef_argsTupleScheme();
      }
    }

    private static class setRef_argsTupleScheme extends TupleScheme<setRef_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setRef_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser()) {
          optionals.set(0);
        }
        if (struct.isSetRefs()) {
          optionals.set(1);
        }
        if (struct.isSetType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUser()) {
          oprot.writeI64(struct.user);
        }
        if (struct.isSetRefs()) {
          {
            oprot.writeI32(struct.refs.size());
            for (long _iter4 : struct.refs)
            {
              oprot.writeI64(_iter4);
            }
          }
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setRef_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.user = iprot.readI64();
          struct.setUserIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.refs = new ArrayList<Long>(_list5.size);
            long _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readI64();
              struct.refs.add(_elem6);
            }
          }
          struct.setRefsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
      }
    }

  }

  public static class setRef_result implements org.apache.thrift.TBase<setRef_result, setRef_result._Fields>, java.io.Serializable, Cloneable, Comparable<setRef_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setRef_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setRef_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setRef_resultTupleSchemeFactory());
    }

    private boolean success; // required
    private com.alone.thrift.struct.InvalidOperation ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setRef_result.class, metaDataMap);
    }

    public setRef_result() {
    }

    public setRef_result(
      boolean success,
      com.alone.thrift.struct.InvalidOperation ex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setRef_result(setRef_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new com.alone.thrift.struct.InvalidOperation(other.ex);
      }
    }

    public setRef_result deepCopy() {
      return new setRef_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setRef_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.alone.thrift.struct.InvalidOperation getEx() {
      return this.ex;
    }

    public setRef_result setEx(com.alone.thrift.struct.InvalidOperation ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((com.alone.thrift.struct.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setRef_result)
        return this.equals((setRef_result)that);
      return false;
    }

    public boolean equals(setRef_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(setRef_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setRef_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setRef_resultStandardSchemeFactory implements SchemeFactory {
      public setRef_resultStandardScheme getScheme() {
        return new setRef_resultStandardScheme();
      }
    }

    private static class setRef_resultStandardScheme extends StandardScheme<setRef_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setRef_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new com.alone.thrift.struct.InvalidOperation();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setRef_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setRef_resultTupleSchemeFactory implements SchemeFactory {
      public setRef_resultTupleScheme getScheme() {
        return new setRef_resultTupleScheme();
      }
    }

    private static class setRef_resultTupleScheme extends TupleScheme<setRef_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setRef_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setRef_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new com.alone.thrift.struct.InvalidOperation();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class setRefs_args implements org.apache.thrift.TBase<setRefs_args, setRefs_args._Fields>, java.io.Serializable, Cloneable, Comparable<setRefs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setRefs_args");

    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField BOX_FIELD_DESC = new org.apache.thrift.protocol.TField("box", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField APP_PACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("app_package", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField REQUIRE_PACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("require_package", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField APP_WHITE_FIELD_DESC = new org.apache.thrift.protocol.TField("app_white", org.apache.thrift.protocol.TType.LIST, (short)5);
    private static final org.apache.thrift.protocol.TField INSTALL_ACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("install_active", org.apache.thrift.protocol.TType.LIST, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setRefs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setRefs_argsTupleSchemeFactory());
    }

    private long user; // required
    private List<Long> box; // required
    private List<Long> app_package; // required
    private List<Long> require_package; // required
    private List<Long> app_white; // required
    private List<Long> install_active; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER((short)1, "user"),
      BOX((short)2, "box"),
      APP_PACKAGE((short)3, "app_package"),
      REQUIRE_PACKAGE((short)4, "require_package"),
      APP_WHITE((short)5, "app_white"),
      INSTALL_ACTIVE((short)6, "install_active");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER
            return USER;
          case 2: // BOX
            return BOX;
          case 3: // APP_PACKAGE
            return APP_PACKAGE;
          case 4: // REQUIRE_PACKAGE
            return REQUIRE_PACKAGE;
          case 5: // APP_WHITE
            return APP_WHITE;
          case 6: // INSTALL_ACTIVE
            return INSTALL_ACTIVE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USER_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.BOX, new org.apache.thrift.meta_data.FieldMetaData("box", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.APP_PACKAGE, new org.apache.thrift.meta_data.FieldMetaData("app_package", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.REQUIRE_PACKAGE, new org.apache.thrift.meta_data.FieldMetaData("require_package", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.APP_WHITE, new org.apache.thrift.meta_data.FieldMetaData("app_white", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.INSTALL_ACTIVE, new org.apache.thrift.meta_data.FieldMetaData("install_active", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setRefs_args.class, metaDataMap);
    }

    public setRefs_args() {
    }

    public setRefs_args(
      long user,
      List<Long> box,
      List<Long> app_package,
      List<Long> require_package,
      List<Long> app_white,
      List<Long> install_active)
    {
      this();
      this.user = user;
      setUserIsSet(true);
      this.box = box;
      this.app_package = app_package;
      this.require_package = require_package;
      this.app_white = app_white;
      this.install_active = install_active;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setRefs_args(setRefs_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.user = other.user;
      if (other.isSetBox()) {
        List<Long> __this__box = new ArrayList<Long>(other.box);
        this.box = __this__box;
      }
      if (other.isSetApp_package()) {
        List<Long> __this__app_package = new ArrayList<Long>(other.app_package);
        this.app_package = __this__app_package;
      }
      if (other.isSetRequire_package()) {
        List<Long> __this__require_package = new ArrayList<Long>(other.require_package);
        this.require_package = __this__require_package;
      }
      if (other.isSetApp_white()) {
        List<Long> __this__app_white = new ArrayList<Long>(other.app_white);
        this.app_white = __this__app_white;
      }
      if (other.isSetInstall_active()) {
        List<Long> __this__install_active = new ArrayList<Long>(other.install_active);
        this.install_active = __this__install_active;
      }
    }

    public setRefs_args deepCopy() {
      return new setRefs_args(this);
    }

    @Override
    public void clear() {
      setUserIsSet(false);
      this.user = 0;
      this.box = null;
      this.app_package = null;
      this.require_package = null;
      this.app_white = null;
      this.install_active = null;
    }

    public long getUser() {
      return this.user;
    }

    public setRefs_args setUser(long user) {
      this.user = user;
      setUserIsSet(true);
      return this;
    }

    public void unsetUser() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USER_ISSET_ID);
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return EncodingUtils.testBit(__isset_bitfield, __USER_ISSET_ID);
    }

    public void setUserIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USER_ISSET_ID, value);
    }

    public int getBoxSize() {
      return (this.box == null) ? 0 : this.box.size();
    }

    public java.util.Iterator<Long> getBoxIterator() {
      return (this.box == null) ? null : this.box.iterator();
    }

    public void addToBox(long elem) {
      if (this.box == null) {
        this.box = new ArrayList<Long>();
      }
      this.box.add(elem);
    }

    public List<Long> getBox() {
      return this.box;
    }

    public setRefs_args setBox(List<Long> box) {
      this.box = box;
      return this;
    }

    public void unsetBox() {
      this.box = null;
    }

    /** Returns true if field box is set (has been assigned a value) and false otherwise */
    public boolean isSetBox() {
      return this.box != null;
    }

    public void setBoxIsSet(boolean value) {
      if (!value) {
        this.box = null;
      }
    }

    public int getApp_packageSize() {
      return (this.app_package == null) ? 0 : this.app_package.size();
    }

    public java.util.Iterator<Long> getApp_packageIterator() {
      return (this.app_package == null) ? null : this.app_package.iterator();
    }

    public void addToApp_package(long elem) {
      if (this.app_package == null) {
        this.app_package = new ArrayList<Long>();
      }
      this.app_package.add(elem);
    }

    public List<Long> getApp_package() {
      return this.app_package;
    }

    public setRefs_args setApp_package(List<Long> app_package) {
      this.app_package = app_package;
      return this;
    }

    public void unsetApp_package() {
      this.app_package = null;
    }

    /** Returns true if field app_package is set (has been assigned a value) and false otherwise */
    public boolean isSetApp_package() {
      return this.app_package != null;
    }

    public void setApp_packageIsSet(boolean value) {
      if (!value) {
        this.app_package = null;
      }
    }

    public int getRequire_packageSize() {
      return (this.require_package == null) ? 0 : this.require_package.size();
    }

    public java.util.Iterator<Long> getRequire_packageIterator() {
      return (this.require_package == null) ? null : this.require_package.iterator();
    }

    public void addToRequire_package(long elem) {
      if (this.require_package == null) {
        this.require_package = new ArrayList<Long>();
      }
      this.require_package.add(elem);
    }

    public List<Long> getRequire_package() {
      return this.require_package;
    }

    public setRefs_args setRequire_package(List<Long> require_package) {
      this.require_package = require_package;
      return this;
    }

    public void unsetRequire_package() {
      this.require_package = null;
    }

    /** Returns true if field require_package is set (has been assigned a value) and false otherwise */
    public boolean isSetRequire_package() {
      return this.require_package != null;
    }

    public void setRequire_packageIsSet(boolean value) {
      if (!value) {
        this.require_package = null;
      }
    }

    public int getApp_whiteSize() {
      return (this.app_white == null) ? 0 : this.app_white.size();
    }

    public java.util.Iterator<Long> getApp_whiteIterator() {
      return (this.app_white == null) ? null : this.app_white.iterator();
    }

    public void addToApp_white(long elem) {
      if (this.app_white == null) {
        this.app_white = new ArrayList<Long>();
      }
      this.app_white.add(elem);
    }

    public List<Long> getApp_white() {
      return this.app_white;
    }

    public setRefs_args setApp_white(List<Long> app_white) {
      this.app_white = app_white;
      return this;
    }

    public void unsetApp_white() {
      this.app_white = null;
    }

    /** Returns true if field app_white is set (has been assigned a value) and false otherwise */
    public boolean isSetApp_white() {
      return this.app_white != null;
    }

    public void setApp_whiteIsSet(boolean value) {
      if (!value) {
        this.app_white = null;
      }
    }

    public int getInstall_activeSize() {
      return (this.install_active == null) ? 0 : this.install_active.size();
    }

    public java.util.Iterator<Long> getInstall_activeIterator() {
      return (this.install_active == null) ? null : this.install_active.iterator();
    }

    public void addToInstall_active(long elem) {
      if (this.install_active == null) {
        this.install_active = new ArrayList<Long>();
      }
      this.install_active.add(elem);
    }

    public List<Long> getInstall_active() {
      return this.install_active;
    }

    public setRefs_args setInstall_active(List<Long> install_active) {
      this.install_active = install_active;
      return this;
    }

    public void unsetInstall_active() {
      this.install_active = null;
    }

    /** Returns true if field install_active is set (has been assigned a value) and false otherwise */
    public boolean isSetInstall_active() {
      return this.install_active != null;
    }

    public void setInstall_activeIsSet(boolean value) {
      if (!value) {
        this.install_active = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((Long)value);
        }
        break;

      case BOX:
        if (value == null) {
          unsetBox();
        } else {
          setBox((List<Long>)value);
        }
        break;

      case APP_PACKAGE:
        if (value == null) {
          unsetApp_package();
        } else {
          setApp_package((List<Long>)value);
        }
        break;

      case REQUIRE_PACKAGE:
        if (value == null) {
          unsetRequire_package();
        } else {
          setRequire_package((List<Long>)value);
        }
        break;

      case APP_WHITE:
        if (value == null) {
          unsetApp_white();
        } else {
          setApp_white((List<Long>)value);
        }
        break;

      case INSTALL_ACTIVE:
        if (value == null) {
          unsetInstall_active();
        } else {
          setInstall_active((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER:
        return getUser();

      case BOX:
        return getBox();

      case APP_PACKAGE:
        return getApp_package();

      case REQUIRE_PACKAGE:
        return getRequire_package();

      case APP_WHITE:
        return getApp_white();

      case INSTALL_ACTIVE:
        return getInstall_active();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER:
        return isSetUser();
      case BOX:
        return isSetBox();
      case APP_PACKAGE:
        return isSetApp_package();
      case REQUIRE_PACKAGE:
        return isSetRequire_package();
      case APP_WHITE:
        return isSetApp_white();
      case INSTALL_ACTIVE:
        return isSetInstall_active();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setRefs_args)
        return this.equals((setRefs_args)that);
      return false;
    }

    public boolean equals(setRefs_args that) {
      if (that == null)
        return false;

      boolean this_present_user = true;
      boolean that_present_user = true;
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (this.user != that.user)
          return false;
      }

      boolean this_present_box = true && this.isSetBox();
      boolean that_present_box = true && that.isSetBox();
      if (this_present_box || that_present_box) {
        if (!(this_present_box && that_present_box))
          return false;
        if (!this.box.equals(that.box))
          return false;
      }

      boolean this_present_app_package = true && this.isSetApp_package();
      boolean that_present_app_package = true && that.isSetApp_package();
      if (this_present_app_package || that_present_app_package) {
        if (!(this_present_app_package && that_present_app_package))
          return false;
        if (!this.app_package.equals(that.app_package))
          return false;
      }

      boolean this_present_require_package = true && this.isSetRequire_package();
      boolean that_present_require_package = true && that.isSetRequire_package();
      if (this_present_require_package || that_present_require_package) {
        if (!(this_present_require_package && that_present_require_package))
          return false;
        if (!this.require_package.equals(that.require_package))
          return false;
      }

      boolean this_present_app_white = true && this.isSetApp_white();
      boolean that_present_app_white = true && that.isSetApp_white();
      if (this_present_app_white || that_present_app_white) {
        if (!(this_present_app_white && that_present_app_white))
          return false;
        if (!this.app_white.equals(that.app_white))
          return false;
      }

      boolean this_present_install_active = true && this.isSetInstall_active();
      boolean that_present_install_active = true && that.isSetInstall_active();
      if (this_present_install_active || that_present_install_active) {
        if (!(this_present_install_active && that_present_install_active))
          return false;
        if (!this.install_active.equals(that.install_active))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_user = true;
      list.add(present_user);
      if (present_user)
        list.add(user);

      boolean present_box = true && (isSetBox());
      list.add(present_box);
      if (present_box)
        list.add(box);

      boolean present_app_package = true && (isSetApp_package());
      list.add(present_app_package);
      if (present_app_package)
        list.add(app_package);

      boolean present_require_package = true && (isSetRequire_package());
      list.add(present_require_package);
      if (present_require_package)
        list.add(require_package);

      boolean present_app_white = true && (isSetApp_white());
      list.add(present_app_white);
      if (present_app_white)
        list.add(app_white);

      boolean present_install_active = true && (isSetInstall_active());
      list.add(present_install_active);
      if (present_install_active)
        list.add(install_active);

      return list.hashCode();
    }

    @Override
    public int compareTo(setRefs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBox()).compareTo(other.isSetBox());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBox()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.box, other.box);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApp_package()).compareTo(other.isSetApp_package());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApp_package()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.app_package, other.app_package);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequire_package()).compareTo(other.isSetRequire_package());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequire_package()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.require_package, other.require_package);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApp_white()).compareTo(other.isSetApp_white());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApp_white()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.app_white, other.app_white);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInstall_active()).compareTo(other.isSetInstall_active());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstall_active()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.install_active, other.install_active);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setRefs_args(");
      boolean first = true;

      sb.append("user:");
      sb.append(this.user);
      first = false;
      if (!first) sb.append(", ");
      sb.append("box:");
      if (this.box == null) {
        sb.append("null");
      } else {
        sb.append(this.box);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("app_package:");
      if (this.app_package == null) {
        sb.append("null");
      } else {
        sb.append(this.app_package);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("require_package:");
      if (this.require_package == null) {
        sb.append("null");
      } else {
        sb.append(this.require_package);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("app_white:");
      if (this.app_white == null) {
        sb.append("null");
      } else {
        sb.append(this.app_white);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("install_active:");
      if (this.install_active == null) {
        sb.append("null");
      } else {
        sb.append(this.install_active);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setRefs_argsStandardSchemeFactory implements SchemeFactory {
      public setRefs_argsStandardScheme getScheme() {
        return new setRefs_argsStandardScheme();
      }
    }

    private static class setRefs_argsStandardScheme extends StandardScheme<setRefs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setRefs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.user = iprot.readI64();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BOX
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.box = new ArrayList<Long>(_list8.size);
                  long _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = iprot.readI64();
                    struct.box.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setBoxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // APP_PACKAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                  struct.app_package = new ArrayList<Long>(_list11.size);
                  long _elem12;
                  for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                  {
                    _elem12 = iprot.readI64();
                    struct.app_package.add(_elem12);
                  }
                  iprot.readListEnd();
                }
                struct.setApp_packageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REQUIRE_PACKAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list14 = iprot.readListBegin();
                  struct.require_package = new ArrayList<Long>(_list14.size);
                  long _elem15;
                  for (int _i16 = 0; _i16 < _list14.size; ++_i16)
                  {
                    _elem15 = iprot.readI64();
                    struct.require_package.add(_elem15);
                  }
                  iprot.readListEnd();
                }
                struct.setRequire_packageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // APP_WHITE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list17 = iprot.readListBegin();
                  struct.app_white = new ArrayList<Long>(_list17.size);
                  long _elem18;
                  for (int _i19 = 0; _i19 < _list17.size; ++_i19)
                  {
                    _elem18 = iprot.readI64();
                    struct.app_white.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setApp_whiteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // INSTALL_ACTIVE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                  struct.install_active = new ArrayList<Long>(_list20.size);
                  long _elem21;
                  for (int _i22 = 0; _i22 < _list20.size; ++_i22)
                  {
                    _elem21 = iprot.readI64();
                    struct.install_active.add(_elem21);
                  }
                  iprot.readListEnd();
                }
                struct.setInstall_activeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setRefs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeI64(struct.user);
        oprot.writeFieldEnd();
        if (struct.box != null) {
          oprot.writeFieldBegin(BOX_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.box.size()));
            for (long _iter23 : struct.box)
            {
              oprot.writeI64(_iter23);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.app_package != null) {
          oprot.writeFieldBegin(APP_PACKAGE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.app_package.size()));
            for (long _iter24 : struct.app_package)
            {
              oprot.writeI64(_iter24);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.require_package != null) {
          oprot.writeFieldBegin(REQUIRE_PACKAGE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.require_package.size()));
            for (long _iter25 : struct.require_package)
            {
              oprot.writeI64(_iter25);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.app_white != null) {
          oprot.writeFieldBegin(APP_WHITE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.app_white.size()));
            for (long _iter26 : struct.app_white)
            {
              oprot.writeI64(_iter26);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.install_active != null) {
          oprot.writeFieldBegin(INSTALL_ACTIVE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.install_active.size()));
            for (long _iter27 : struct.install_active)
            {
              oprot.writeI64(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setRefs_argsTupleSchemeFactory implements SchemeFactory {
      public setRefs_argsTupleScheme getScheme() {
        return new setRefs_argsTupleScheme();
      }
    }

    private static class setRefs_argsTupleScheme extends TupleScheme<setRefs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setRefs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser()) {
          optionals.set(0);
        }
        if (struct.isSetBox()) {
          optionals.set(1);
        }
        if (struct.isSetApp_package()) {
          optionals.set(2);
        }
        if (struct.isSetRequire_package()) {
          optionals.set(3);
        }
        if (struct.isSetApp_white()) {
          optionals.set(4);
        }
        if (struct.isSetInstall_active()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetUser()) {
          oprot.writeI64(struct.user);
        }
        if (struct.isSetBox()) {
          {
            oprot.writeI32(struct.box.size());
            for (long _iter28 : struct.box)
            {
              oprot.writeI64(_iter28);
            }
          }
        }
        if (struct.isSetApp_package()) {
          {
            oprot.writeI32(struct.app_package.size());
            for (long _iter29 : struct.app_package)
            {
              oprot.writeI64(_iter29);
            }
          }
        }
        if (struct.isSetRequire_package()) {
          {
            oprot.writeI32(struct.require_package.size());
            for (long _iter30 : struct.require_package)
            {
              oprot.writeI64(_iter30);
            }
          }
        }
        if (struct.isSetApp_white()) {
          {
            oprot.writeI32(struct.app_white.size());
            for (long _iter31 : struct.app_white)
            {
              oprot.writeI64(_iter31);
            }
          }
        }
        if (struct.isSetInstall_active()) {
          {
            oprot.writeI32(struct.install_active.size());
            for (long _iter32 : struct.install_active)
            {
              oprot.writeI64(_iter32);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setRefs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.user = iprot.readI64();
          struct.setUserIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.box = new ArrayList<Long>(_list33.size);
            long _elem34;
            for (int _i35 = 0; _i35 < _list33.size; ++_i35)
            {
              _elem34 = iprot.readI64();
              struct.box.add(_elem34);
            }
          }
          struct.setBoxIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list36 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.app_package = new ArrayList<Long>(_list36.size);
            long _elem37;
            for (int _i38 = 0; _i38 < _list36.size; ++_i38)
            {
              _elem37 = iprot.readI64();
              struct.app_package.add(_elem37);
            }
          }
          struct.setApp_packageIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.require_package = new ArrayList<Long>(_list39.size);
            long _elem40;
            for (int _i41 = 0; _i41 < _list39.size; ++_i41)
            {
              _elem40 = iprot.readI64();
              struct.require_package.add(_elem40);
            }
          }
          struct.setRequire_packageIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.app_white = new ArrayList<Long>(_list42.size);
            long _elem43;
            for (int _i44 = 0; _i44 < _list42.size; ++_i44)
            {
              _elem43 = iprot.readI64();
              struct.app_white.add(_elem43);
            }
          }
          struct.setApp_whiteIsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.install_active = new ArrayList<Long>(_list45.size);
            long _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = iprot.readI64();
              struct.install_active.add(_elem46);
            }
          }
          struct.setInstall_activeIsSet(true);
        }
      }
    }

  }

  public static class setRefs_result implements org.apache.thrift.TBase<setRefs_result, setRefs_result._Fields>, java.io.Serializable, Cloneable, Comparable<setRefs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setRefs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setRefs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setRefs_resultTupleSchemeFactory());
    }

    private boolean success; // required
    private com.alone.thrift.struct.InvalidOperation ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setRefs_result.class, metaDataMap);
    }

    public setRefs_result() {
    }

    public setRefs_result(
      boolean success,
      com.alone.thrift.struct.InvalidOperation ex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setRefs_result(setRefs_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new com.alone.thrift.struct.InvalidOperation(other.ex);
      }
    }

    public setRefs_result deepCopy() {
      return new setRefs_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setRefs_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.alone.thrift.struct.InvalidOperation getEx() {
      return this.ex;
    }

    public setRefs_result setEx(com.alone.thrift.struct.InvalidOperation ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((com.alone.thrift.struct.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setRefs_result)
        return this.equals((setRefs_result)that);
      return false;
    }

    public boolean equals(setRefs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(setRefs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setRefs_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setRefs_resultStandardSchemeFactory implements SchemeFactory {
      public setRefs_resultStandardScheme getScheme() {
        return new setRefs_resultStandardScheme();
      }
    }

    private static class setRefs_resultStandardScheme extends StandardScheme<setRefs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setRefs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new com.alone.thrift.struct.InvalidOperation();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setRefs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setRefs_resultTupleSchemeFactory implements SchemeFactory {
      public setRefs_resultTupleScheme getScheme() {
        return new setRefs_resultTupleScheme();
      }
    }

    private static class setRefs_resultTupleScheme extends TupleScheme<setRefs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setRefs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setRefs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new com.alone.thrift.struct.InvalidOperation();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

}
