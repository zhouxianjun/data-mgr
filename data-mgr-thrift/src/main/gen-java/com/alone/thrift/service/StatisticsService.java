/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.alone.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-08-04")
public class StatisticsService {

  public interface Iface {

    public String getStaticIndexByDateForSuper(long user, long startDate, long endDate, long province, long city, String sortName, String sortDir) throws com.alone.thrift.struct.InvalidOperation, org.apache.thrift.TException;

    public String getStaticIndexByDateForAdmin(long user, long startDate, long endDate, long province, long city, String sortName, String sortDir) throws com.alone.thrift.struct.InvalidOperation, org.apache.thrift.TException;

    public String getStaticIndexByDate(long user, long startDate, long endDate, long province, long city, String sortName, String sortDir) throws com.alone.thrift.struct.InvalidOperation, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getStaticIndexByDateForSuper(long user, long startDate, long endDate, long province, long city, String sortName, String sortDir, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getStaticIndexByDateForAdmin(long user, long startDate, long endDate, long province, long city, String sortName, String sortDir, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getStaticIndexByDate(long user, long startDate, long endDate, long province, long city, String sortName, String sortDir, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String getStaticIndexByDateForSuper(long user, long startDate, long endDate, long province, long city, String sortName, String sortDir) throws com.alone.thrift.struct.InvalidOperation, org.apache.thrift.TException
    {
      send_getStaticIndexByDateForSuper(user, startDate, endDate, province, city, sortName, sortDir);
      return recv_getStaticIndexByDateForSuper();
    }

    public void send_getStaticIndexByDateForSuper(long user, long startDate, long endDate, long province, long city, String sortName, String sortDir) throws org.apache.thrift.TException
    {
      getStaticIndexByDateForSuper_args args = new getStaticIndexByDateForSuper_args();
      args.setUser(user);
      args.setStartDate(startDate);
      args.setEndDate(endDate);
      args.setProvince(province);
      args.setCity(city);
      args.setSortName(sortName);
      args.setSortDir(sortDir);
      sendBase("getStaticIndexByDateForSuper", args);
    }

    public String recv_getStaticIndexByDateForSuper() throws com.alone.thrift.struct.InvalidOperation, org.apache.thrift.TException
    {
      getStaticIndexByDateForSuper_result result = new getStaticIndexByDateForSuper_result();
      receiveBase(result, "getStaticIndexByDateForSuper");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStaticIndexByDateForSuper failed: unknown result");
    }

    public String getStaticIndexByDateForAdmin(long user, long startDate, long endDate, long province, long city, String sortName, String sortDir) throws com.alone.thrift.struct.InvalidOperation, org.apache.thrift.TException
    {
      send_getStaticIndexByDateForAdmin(user, startDate, endDate, province, city, sortName, sortDir);
      return recv_getStaticIndexByDateForAdmin();
    }

    public void send_getStaticIndexByDateForAdmin(long user, long startDate, long endDate, long province, long city, String sortName, String sortDir) throws org.apache.thrift.TException
    {
      getStaticIndexByDateForAdmin_args args = new getStaticIndexByDateForAdmin_args();
      args.setUser(user);
      args.setStartDate(startDate);
      args.setEndDate(endDate);
      args.setProvince(province);
      args.setCity(city);
      args.setSortName(sortName);
      args.setSortDir(sortDir);
      sendBase("getStaticIndexByDateForAdmin", args);
    }

    public String recv_getStaticIndexByDateForAdmin() throws com.alone.thrift.struct.InvalidOperation, org.apache.thrift.TException
    {
      getStaticIndexByDateForAdmin_result result = new getStaticIndexByDateForAdmin_result();
      receiveBase(result, "getStaticIndexByDateForAdmin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStaticIndexByDateForAdmin failed: unknown result");
    }

    public String getStaticIndexByDate(long user, long startDate, long endDate, long province, long city, String sortName, String sortDir) throws com.alone.thrift.struct.InvalidOperation, org.apache.thrift.TException
    {
      send_getStaticIndexByDate(user, startDate, endDate, province, city, sortName, sortDir);
      return recv_getStaticIndexByDate();
    }

    public void send_getStaticIndexByDate(long user, long startDate, long endDate, long province, long city, String sortName, String sortDir) throws org.apache.thrift.TException
    {
      getStaticIndexByDate_args args = new getStaticIndexByDate_args();
      args.setUser(user);
      args.setStartDate(startDate);
      args.setEndDate(endDate);
      args.setProvince(province);
      args.setCity(city);
      args.setSortName(sortName);
      args.setSortDir(sortDir);
      sendBase("getStaticIndexByDate", args);
    }

    public String recv_getStaticIndexByDate() throws com.alone.thrift.struct.InvalidOperation, org.apache.thrift.TException
    {
      getStaticIndexByDate_result result = new getStaticIndexByDate_result();
      receiveBase(result, "getStaticIndexByDate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStaticIndexByDate failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getStaticIndexByDateForSuper(long user, long startDate, long endDate, long province, long city, String sortName, String sortDir, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStaticIndexByDateForSuper_call method_call = new getStaticIndexByDateForSuper_call(user, startDate, endDate, province, city, sortName, sortDir, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStaticIndexByDateForSuper_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long user;
      private long startDate;
      private long endDate;
      private long province;
      private long city;
      private String sortName;
      private String sortDir;
      public getStaticIndexByDateForSuper_call(long user, long startDate, long endDate, long province, long city, String sortName, String sortDir, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user = user;
        this.startDate = startDate;
        this.endDate = endDate;
        this.province = province;
        this.city = city;
        this.sortName = sortName;
        this.sortDir = sortDir;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStaticIndexByDateForSuper", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStaticIndexByDateForSuper_args args = new getStaticIndexByDateForSuper_args();
        args.setUser(user);
        args.setStartDate(startDate);
        args.setEndDate(endDate);
        args.setProvince(province);
        args.setCity(city);
        args.setSortName(sortName);
        args.setSortDir(sortDir);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws com.alone.thrift.struct.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStaticIndexByDateForSuper();
      }
    }

    public void getStaticIndexByDateForAdmin(long user, long startDate, long endDate, long province, long city, String sortName, String sortDir, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStaticIndexByDateForAdmin_call method_call = new getStaticIndexByDateForAdmin_call(user, startDate, endDate, province, city, sortName, sortDir, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStaticIndexByDateForAdmin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long user;
      private long startDate;
      private long endDate;
      private long province;
      private long city;
      private String sortName;
      private String sortDir;
      public getStaticIndexByDateForAdmin_call(long user, long startDate, long endDate, long province, long city, String sortName, String sortDir, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user = user;
        this.startDate = startDate;
        this.endDate = endDate;
        this.province = province;
        this.city = city;
        this.sortName = sortName;
        this.sortDir = sortDir;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStaticIndexByDateForAdmin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStaticIndexByDateForAdmin_args args = new getStaticIndexByDateForAdmin_args();
        args.setUser(user);
        args.setStartDate(startDate);
        args.setEndDate(endDate);
        args.setProvince(province);
        args.setCity(city);
        args.setSortName(sortName);
        args.setSortDir(sortDir);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws com.alone.thrift.struct.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStaticIndexByDateForAdmin();
      }
    }

    public void getStaticIndexByDate(long user, long startDate, long endDate, long province, long city, String sortName, String sortDir, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStaticIndexByDate_call method_call = new getStaticIndexByDate_call(user, startDate, endDate, province, city, sortName, sortDir, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStaticIndexByDate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long user;
      private long startDate;
      private long endDate;
      private long province;
      private long city;
      private String sortName;
      private String sortDir;
      public getStaticIndexByDate_call(long user, long startDate, long endDate, long province, long city, String sortName, String sortDir, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user = user;
        this.startDate = startDate;
        this.endDate = endDate;
        this.province = province;
        this.city = city;
        this.sortName = sortName;
        this.sortDir = sortDir;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStaticIndexByDate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStaticIndexByDate_args args = new getStaticIndexByDate_args();
        args.setUser(user);
        args.setStartDate(startDate);
        args.setEndDate(endDate);
        args.setProvince(province);
        args.setCity(city);
        args.setSortName(sortName);
        args.setSortDir(sortDir);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws com.alone.thrift.struct.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStaticIndexByDate();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getStaticIndexByDateForSuper", new getStaticIndexByDateForSuper());
      processMap.put("getStaticIndexByDateForAdmin", new getStaticIndexByDateForAdmin());
      processMap.put("getStaticIndexByDate", new getStaticIndexByDate());
      return processMap;
    }

    public static class getStaticIndexByDateForSuper<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStaticIndexByDateForSuper_args> {
      public getStaticIndexByDateForSuper() {
        super("getStaticIndexByDateForSuper");
      }

      public getStaticIndexByDateForSuper_args getEmptyArgsInstance() {
        return new getStaticIndexByDateForSuper_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStaticIndexByDateForSuper_result getResult(I iface, getStaticIndexByDateForSuper_args args) throws org.apache.thrift.TException {
        getStaticIndexByDateForSuper_result result = new getStaticIndexByDateForSuper_result();
        try {
          result.success = iface.getStaticIndexByDateForSuper(args.user, args.startDate, args.endDate, args.province, args.city, args.sortName, args.sortDir);
        } catch (com.alone.thrift.struct.InvalidOperation ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class getStaticIndexByDateForAdmin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStaticIndexByDateForAdmin_args> {
      public getStaticIndexByDateForAdmin() {
        super("getStaticIndexByDateForAdmin");
      }

      public getStaticIndexByDateForAdmin_args getEmptyArgsInstance() {
        return new getStaticIndexByDateForAdmin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStaticIndexByDateForAdmin_result getResult(I iface, getStaticIndexByDateForAdmin_args args) throws org.apache.thrift.TException {
        getStaticIndexByDateForAdmin_result result = new getStaticIndexByDateForAdmin_result();
        try {
          result.success = iface.getStaticIndexByDateForAdmin(args.user, args.startDate, args.endDate, args.province, args.city, args.sortName, args.sortDir);
        } catch (com.alone.thrift.struct.InvalidOperation ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class getStaticIndexByDate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStaticIndexByDate_args> {
      public getStaticIndexByDate() {
        super("getStaticIndexByDate");
      }

      public getStaticIndexByDate_args getEmptyArgsInstance() {
        return new getStaticIndexByDate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStaticIndexByDate_result getResult(I iface, getStaticIndexByDate_args args) throws org.apache.thrift.TException {
        getStaticIndexByDate_result result = new getStaticIndexByDate_result();
        try {
          result.success = iface.getStaticIndexByDate(args.user, args.startDate, args.endDate, args.province, args.city, args.sortName, args.sortDir);
        } catch (com.alone.thrift.struct.InvalidOperation ex) {
          result.ex = ex;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getStaticIndexByDateForSuper", new getStaticIndexByDateForSuper());
      processMap.put("getStaticIndexByDateForAdmin", new getStaticIndexByDateForAdmin());
      processMap.put("getStaticIndexByDate", new getStaticIndexByDate());
      return processMap;
    }

    public static class getStaticIndexByDateForSuper<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStaticIndexByDateForSuper_args, String> {
      public getStaticIndexByDateForSuper() {
        super("getStaticIndexByDateForSuper");
      }

      public getStaticIndexByDateForSuper_args getEmptyArgsInstance() {
        return new getStaticIndexByDateForSuper_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getStaticIndexByDateForSuper_result result = new getStaticIndexByDateForSuper_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStaticIndexByDateForSuper_result result = new getStaticIndexByDateForSuper_result();
            if (e instanceof com.alone.thrift.struct.InvalidOperation) {
                        result.ex = (com.alone.thrift.struct.InvalidOperation) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStaticIndexByDateForSuper_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getStaticIndexByDateForSuper(args.user, args.startDate, args.endDate, args.province, args.city, args.sortName, args.sortDir,resultHandler);
      }
    }

    public static class getStaticIndexByDateForAdmin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStaticIndexByDateForAdmin_args, String> {
      public getStaticIndexByDateForAdmin() {
        super("getStaticIndexByDateForAdmin");
      }

      public getStaticIndexByDateForAdmin_args getEmptyArgsInstance() {
        return new getStaticIndexByDateForAdmin_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getStaticIndexByDateForAdmin_result result = new getStaticIndexByDateForAdmin_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStaticIndexByDateForAdmin_result result = new getStaticIndexByDateForAdmin_result();
            if (e instanceof com.alone.thrift.struct.InvalidOperation) {
                        result.ex = (com.alone.thrift.struct.InvalidOperation) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStaticIndexByDateForAdmin_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getStaticIndexByDateForAdmin(args.user, args.startDate, args.endDate, args.province, args.city, args.sortName, args.sortDir,resultHandler);
      }
    }

    public static class getStaticIndexByDate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStaticIndexByDate_args, String> {
      public getStaticIndexByDate() {
        super("getStaticIndexByDate");
      }

      public getStaticIndexByDate_args getEmptyArgsInstance() {
        return new getStaticIndexByDate_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getStaticIndexByDate_result result = new getStaticIndexByDate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStaticIndexByDate_result result = new getStaticIndexByDate_result();
            if (e instanceof com.alone.thrift.struct.InvalidOperation) {
                        result.ex = (com.alone.thrift.struct.InvalidOperation) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStaticIndexByDate_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getStaticIndexByDate(args.user, args.startDate, args.endDate, args.province, args.city, args.sortName, args.sortDir,resultHandler);
      }
    }

  }

  public static class getStaticIndexByDateForSuper_args implements org.apache.thrift.TBase<getStaticIndexByDateForSuper_args, getStaticIndexByDateForSuper_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStaticIndexByDateForSuper_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStaticIndexByDateForSuper_args");

    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField PROVINCE_FIELD_DESC = new org.apache.thrift.protocol.TField("province", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField SORT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sortName", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField SORT_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("sortDir", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStaticIndexByDateForSuper_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStaticIndexByDateForSuper_argsTupleSchemeFactory());
    }

    private long user; // required
    private long startDate; // required
    private long endDate; // required
    private long province; // required
    private long city; // required
    private String sortName; // required
    private String sortDir; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER((short)1, "user"),
      START_DATE((short)2, "startDate"),
      END_DATE((short)3, "endDate"),
      PROVINCE((short)4, "province"),
      CITY((short)5, "city"),
      SORT_NAME((short)6, "sortName"),
      SORT_DIR((short)7, "sortDir");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER
            return USER;
          case 2: // START_DATE
            return START_DATE;
          case 3: // END_DATE
            return END_DATE;
          case 4: // PROVINCE
            return PROVINCE;
          case 5: // CITY
            return CITY;
          case 6: // SORT_NAME
            return SORT_NAME;
          case 7: // SORT_DIR
            return SORT_DIR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USER_ISSET_ID = 0;
    private static final int __STARTDATE_ISSET_ID = 1;
    private static final int __ENDDATE_ISSET_ID = 2;
    private static final int __PROVINCE_ISSET_ID = 3;
    private static final int __CITY_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PROVINCE, new org.apache.thrift.meta_data.FieldMetaData("province", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SORT_NAME, new org.apache.thrift.meta_data.FieldMetaData("sortName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SORT_DIR, new org.apache.thrift.meta_data.FieldMetaData("sortDir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStaticIndexByDateForSuper_args.class, metaDataMap);
    }

    public getStaticIndexByDateForSuper_args() {
    }

    public getStaticIndexByDateForSuper_args(
      long user,
      long startDate,
      long endDate,
      long province,
      long city,
      String sortName,
      String sortDir)
    {
      this();
      this.user = user;
      setUserIsSet(true);
      this.startDate = startDate;
      setStartDateIsSet(true);
      this.endDate = endDate;
      setEndDateIsSet(true);
      this.province = province;
      setProvinceIsSet(true);
      this.city = city;
      setCityIsSet(true);
      this.sortName = sortName;
      this.sortDir = sortDir;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStaticIndexByDateForSuper_args(getStaticIndexByDateForSuper_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.user = other.user;
      this.startDate = other.startDate;
      this.endDate = other.endDate;
      this.province = other.province;
      this.city = other.city;
      if (other.isSetSortName()) {
        this.sortName = other.sortName;
      }
      if (other.isSetSortDir()) {
        this.sortDir = other.sortDir;
      }
    }

    public getStaticIndexByDateForSuper_args deepCopy() {
      return new getStaticIndexByDateForSuper_args(this);
    }

    @Override
    public void clear() {
      setUserIsSet(false);
      this.user = 0;
      setStartDateIsSet(false);
      this.startDate = 0;
      setEndDateIsSet(false);
      this.endDate = 0;
      setProvinceIsSet(false);
      this.province = 0;
      setCityIsSet(false);
      this.city = 0;
      this.sortName = null;
      this.sortDir = null;
    }

    public long getUser() {
      return this.user;
    }

    public getStaticIndexByDateForSuper_args setUser(long user) {
      this.user = user;
      setUserIsSet(true);
      return this;
    }

    public void unsetUser() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USER_ISSET_ID);
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return EncodingUtils.testBit(__isset_bitfield, __USER_ISSET_ID);
    }

    public void setUserIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USER_ISSET_ID, value);
    }

    public long getStartDate() {
      return this.startDate;
    }

    public getStaticIndexByDateForSuper_args setStartDate(long startDate) {
      this.startDate = startDate;
      setStartDateIsSet(true);
      return this;
    }

    public void unsetStartDate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTDATE_ISSET_ID);
    }

    /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
    public boolean isSetStartDate() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTDATE_ISSET_ID);
    }

    public void setStartDateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTDATE_ISSET_ID, value);
    }

    public long getEndDate() {
      return this.endDate;
    }

    public getStaticIndexByDateForSuper_args setEndDate(long endDate) {
      this.endDate = endDate;
      setEndDateIsSet(true);
      return this;
    }

    public void unsetEndDate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
    public boolean isSetEndDate() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    public void setEndDateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATE_ISSET_ID, value);
    }

    public long getProvince() {
      return this.province;
    }

    public getStaticIndexByDateForSuper_args setProvince(long province) {
      this.province = province;
      setProvinceIsSet(true);
      return this;
    }

    public void unsetProvince() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROVINCE_ISSET_ID);
    }

    /** Returns true if field province is set (has been assigned a value) and false otherwise */
    public boolean isSetProvince() {
      return EncodingUtils.testBit(__isset_bitfield, __PROVINCE_ISSET_ID);
    }

    public void setProvinceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROVINCE_ISSET_ID, value);
    }

    public long getCity() {
      return this.city;
    }

    public getStaticIndexByDateForSuper_args setCity(long city) {
      this.city = city;
      setCityIsSet(true);
      return this;
    }

    public void unsetCity() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CITY_ISSET_ID);
    }

    /** Returns true if field city is set (has been assigned a value) and false otherwise */
    public boolean isSetCity() {
      return EncodingUtils.testBit(__isset_bitfield, __CITY_ISSET_ID);
    }

    public void setCityIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CITY_ISSET_ID, value);
    }

    public String getSortName() {
      return this.sortName;
    }

    public getStaticIndexByDateForSuper_args setSortName(String sortName) {
      this.sortName = sortName;
      return this;
    }

    public void unsetSortName() {
      this.sortName = null;
    }

    /** Returns true if field sortName is set (has been assigned a value) and false otherwise */
    public boolean isSetSortName() {
      return this.sortName != null;
    }

    public void setSortNameIsSet(boolean value) {
      if (!value) {
        this.sortName = null;
      }
    }

    public String getSortDir() {
      return this.sortDir;
    }

    public getStaticIndexByDateForSuper_args setSortDir(String sortDir) {
      this.sortDir = sortDir;
      return this;
    }

    public void unsetSortDir() {
      this.sortDir = null;
    }

    /** Returns true if field sortDir is set (has been assigned a value) and false otherwise */
    public boolean isSetSortDir() {
      return this.sortDir != null;
    }

    public void setSortDirIsSet(boolean value) {
      if (!value) {
        this.sortDir = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((Long)value);
        }
        break;

      case START_DATE:
        if (value == null) {
          unsetStartDate();
        } else {
          setStartDate((Long)value);
        }
        break;

      case END_DATE:
        if (value == null) {
          unsetEndDate();
        } else {
          setEndDate((Long)value);
        }
        break;

      case PROVINCE:
        if (value == null) {
          unsetProvince();
        } else {
          setProvince((Long)value);
        }
        break;

      case CITY:
        if (value == null) {
          unsetCity();
        } else {
          setCity((Long)value);
        }
        break;

      case SORT_NAME:
        if (value == null) {
          unsetSortName();
        } else {
          setSortName((String)value);
        }
        break;

      case SORT_DIR:
        if (value == null) {
          unsetSortDir();
        } else {
          setSortDir((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER:
        return getUser();

      case START_DATE:
        return getStartDate();

      case END_DATE:
        return getEndDate();

      case PROVINCE:
        return getProvince();

      case CITY:
        return getCity();

      case SORT_NAME:
        return getSortName();

      case SORT_DIR:
        return getSortDir();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER:
        return isSetUser();
      case START_DATE:
        return isSetStartDate();
      case END_DATE:
        return isSetEndDate();
      case PROVINCE:
        return isSetProvince();
      case CITY:
        return isSetCity();
      case SORT_NAME:
        return isSetSortName();
      case SORT_DIR:
        return isSetSortDir();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStaticIndexByDateForSuper_args)
        return this.equals((getStaticIndexByDateForSuper_args)that);
      return false;
    }

    public boolean equals(getStaticIndexByDateForSuper_args that) {
      if (that == null)
        return false;

      boolean this_present_user = true;
      boolean that_present_user = true;
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (this.user != that.user)
          return false;
      }

      boolean this_present_startDate = true;
      boolean that_present_startDate = true;
      if (this_present_startDate || that_present_startDate) {
        if (!(this_present_startDate && that_present_startDate))
          return false;
        if (this.startDate != that.startDate)
          return false;
      }

      boolean this_present_endDate = true;
      boolean that_present_endDate = true;
      if (this_present_endDate || that_present_endDate) {
        if (!(this_present_endDate && that_present_endDate))
          return false;
        if (this.endDate != that.endDate)
          return false;
      }

      boolean this_present_province = true;
      boolean that_present_province = true;
      if (this_present_province || that_present_province) {
        if (!(this_present_province && that_present_province))
          return false;
        if (this.province != that.province)
          return false;
      }

      boolean this_present_city = true;
      boolean that_present_city = true;
      if (this_present_city || that_present_city) {
        if (!(this_present_city && that_present_city))
          return false;
        if (this.city != that.city)
          return false;
      }

      boolean this_present_sortName = true && this.isSetSortName();
      boolean that_present_sortName = true && that.isSetSortName();
      if (this_present_sortName || that_present_sortName) {
        if (!(this_present_sortName && that_present_sortName))
          return false;
        if (!this.sortName.equals(that.sortName))
          return false;
      }

      boolean this_present_sortDir = true && this.isSetSortDir();
      boolean that_present_sortDir = true && that.isSetSortDir();
      if (this_present_sortDir || that_present_sortDir) {
        if (!(this_present_sortDir && that_present_sortDir))
          return false;
        if (!this.sortDir.equals(that.sortDir))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_user = true;
      list.add(present_user);
      if (present_user)
        list.add(user);

      boolean present_startDate = true;
      list.add(present_startDate);
      if (present_startDate)
        list.add(startDate);

      boolean present_endDate = true;
      list.add(present_endDate);
      if (present_endDate)
        list.add(endDate);

      boolean present_province = true;
      list.add(present_province);
      if (present_province)
        list.add(province);

      boolean present_city = true;
      list.add(present_city);
      if (present_city)
        list.add(city);

      boolean present_sortName = true && (isSetSortName());
      list.add(present_sortName);
      if (present_sortName)
        list.add(sortName);

      boolean present_sortDir = true && (isSetSortDir());
      list.add(present_sortDir);
      if (present_sortDir)
        list.add(sortDir);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStaticIndexByDateForSuper_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartDate()).compareTo(other.isSetStartDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, other.startDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(other.isSetEndDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, other.endDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProvince()).compareTo(other.isSetProvince());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProvince()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.province, other.province);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortName()).compareTo(other.isSetSortName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortName, other.sortName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortDir()).compareTo(other.isSetSortDir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortDir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortDir, other.sortDir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStaticIndexByDateForSuper_args(");
      boolean first = true;

      sb.append("user:");
      sb.append(this.user);
      first = false;
      if (!first) sb.append(", ");
      sb.append("startDate:");
      sb.append(this.startDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endDate:");
      sb.append(this.endDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("province:");
      sb.append(this.province);
      first = false;
      if (!first) sb.append(", ");
      sb.append("city:");
      sb.append(this.city);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortName:");
      if (this.sortName == null) {
        sb.append("null");
      } else {
        sb.append(this.sortName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortDir:");
      if (this.sortDir == null) {
        sb.append("null");
      } else {
        sb.append(this.sortDir);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStaticIndexByDateForSuper_argsStandardSchemeFactory implements SchemeFactory {
      public getStaticIndexByDateForSuper_argsStandardScheme getScheme() {
        return new getStaticIndexByDateForSuper_argsStandardScheme();
      }
    }

    private static class getStaticIndexByDateForSuper_argsStandardScheme extends StandardScheme<getStaticIndexByDateForSuper_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStaticIndexByDateForSuper_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.user = iprot.readI64();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startDate = iprot.readI64();
                struct.setStartDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // END_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endDate = iprot.readI64();
                struct.setEndDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PROVINCE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.province = iprot.readI64();
                struct.setProvinceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CITY
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.city = iprot.readI64();
                struct.setCityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // SORT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sortName = iprot.readString();
                struct.setSortNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // SORT_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sortDir = iprot.readString();
                struct.setSortDirIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStaticIndexByDateForSuper_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeI64(struct.user);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_DATE_FIELD_DESC);
        oprot.writeI64(struct.startDate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_DATE_FIELD_DESC);
        oprot.writeI64(struct.endDate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PROVINCE_FIELD_DESC);
        oprot.writeI64(struct.province);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CITY_FIELD_DESC);
        oprot.writeI64(struct.city);
        oprot.writeFieldEnd();
        if (struct.sortName != null) {
          oprot.writeFieldBegin(SORT_NAME_FIELD_DESC);
          oprot.writeString(struct.sortName);
          oprot.writeFieldEnd();
        }
        if (struct.sortDir != null) {
          oprot.writeFieldBegin(SORT_DIR_FIELD_DESC);
          oprot.writeString(struct.sortDir);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStaticIndexByDateForSuper_argsTupleSchemeFactory implements SchemeFactory {
      public getStaticIndexByDateForSuper_argsTupleScheme getScheme() {
        return new getStaticIndexByDateForSuper_argsTupleScheme();
      }
    }

    private static class getStaticIndexByDateForSuper_argsTupleScheme extends TupleScheme<getStaticIndexByDateForSuper_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStaticIndexByDateForSuper_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser()) {
          optionals.set(0);
        }
        if (struct.isSetStartDate()) {
          optionals.set(1);
        }
        if (struct.isSetEndDate()) {
          optionals.set(2);
        }
        if (struct.isSetProvince()) {
          optionals.set(3);
        }
        if (struct.isSetCity()) {
          optionals.set(4);
        }
        if (struct.isSetSortName()) {
          optionals.set(5);
        }
        if (struct.isSetSortDir()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetUser()) {
          oprot.writeI64(struct.user);
        }
        if (struct.isSetStartDate()) {
          oprot.writeI64(struct.startDate);
        }
        if (struct.isSetEndDate()) {
          oprot.writeI64(struct.endDate);
        }
        if (struct.isSetProvince()) {
          oprot.writeI64(struct.province);
        }
        if (struct.isSetCity()) {
          oprot.writeI64(struct.city);
        }
        if (struct.isSetSortName()) {
          oprot.writeString(struct.sortName);
        }
        if (struct.isSetSortDir()) {
          oprot.writeString(struct.sortDir);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStaticIndexByDateForSuper_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.user = iprot.readI64();
          struct.setUserIsSet(true);
        }
        if (incoming.get(1)) {
          struct.startDate = iprot.readI64();
          struct.setStartDateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.endDate = iprot.readI64();
          struct.setEndDateIsSet(true);
        }
        if (incoming.get(3)) {
          struct.province = iprot.readI64();
          struct.setProvinceIsSet(true);
        }
        if (incoming.get(4)) {
          struct.city = iprot.readI64();
          struct.setCityIsSet(true);
        }
        if (incoming.get(5)) {
          struct.sortName = iprot.readString();
          struct.setSortNameIsSet(true);
        }
        if (incoming.get(6)) {
          struct.sortDir = iprot.readString();
          struct.setSortDirIsSet(true);
        }
      }
    }

  }

  public static class getStaticIndexByDateForSuper_result implements org.apache.thrift.TBase<getStaticIndexByDateForSuper_result, getStaticIndexByDateForSuper_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStaticIndexByDateForSuper_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStaticIndexByDateForSuper_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStaticIndexByDateForSuper_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStaticIndexByDateForSuper_resultTupleSchemeFactory());
    }

    private String success; // required
    private com.alone.thrift.struct.InvalidOperation ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStaticIndexByDateForSuper_result.class, metaDataMap);
    }

    public getStaticIndexByDateForSuper_result() {
    }

    public getStaticIndexByDateForSuper_result(
      String success,
      com.alone.thrift.struct.InvalidOperation ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStaticIndexByDateForSuper_result(getStaticIndexByDateForSuper_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new com.alone.thrift.struct.InvalidOperation(other.ex);
      }
    }

    public getStaticIndexByDateForSuper_result deepCopy() {
      return new getStaticIndexByDateForSuper_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getStaticIndexByDateForSuper_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.alone.thrift.struct.InvalidOperation getEx() {
      return this.ex;
    }

    public getStaticIndexByDateForSuper_result setEx(com.alone.thrift.struct.InvalidOperation ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((com.alone.thrift.struct.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStaticIndexByDateForSuper_result)
        return this.equals((getStaticIndexByDateForSuper_result)that);
      return false;
    }

    public boolean equals(getStaticIndexByDateForSuper_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStaticIndexByDateForSuper_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStaticIndexByDateForSuper_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStaticIndexByDateForSuper_resultStandardSchemeFactory implements SchemeFactory {
      public getStaticIndexByDateForSuper_resultStandardScheme getScheme() {
        return new getStaticIndexByDateForSuper_resultStandardScheme();
      }
    }

    private static class getStaticIndexByDateForSuper_resultStandardScheme extends StandardScheme<getStaticIndexByDateForSuper_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStaticIndexByDateForSuper_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new com.alone.thrift.struct.InvalidOperation();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStaticIndexByDateForSuper_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStaticIndexByDateForSuper_resultTupleSchemeFactory implements SchemeFactory {
      public getStaticIndexByDateForSuper_resultTupleScheme getScheme() {
        return new getStaticIndexByDateForSuper_resultTupleScheme();
      }
    }

    private static class getStaticIndexByDateForSuper_resultTupleScheme extends TupleScheme<getStaticIndexByDateForSuper_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStaticIndexByDateForSuper_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStaticIndexByDateForSuper_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new com.alone.thrift.struct.InvalidOperation();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class getStaticIndexByDateForAdmin_args implements org.apache.thrift.TBase<getStaticIndexByDateForAdmin_args, getStaticIndexByDateForAdmin_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStaticIndexByDateForAdmin_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStaticIndexByDateForAdmin_args");

    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField PROVINCE_FIELD_DESC = new org.apache.thrift.protocol.TField("province", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField SORT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sortName", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField SORT_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("sortDir", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStaticIndexByDateForAdmin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStaticIndexByDateForAdmin_argsTupleSchemeFactory());
    }

    private long user; // required
    private long startDate; // required
    private long endDate; // required
    private long province; // required
    private long city; // required
    private String sortName; // required
    private String sortDir; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER((short)1, "user"),
      START_DATE((short)2, "startDate"),
      END_DATE((short)3, "endDate"),
      PROVINCE((short)4, "province"),
      CITY((short)5, "city"),
      SORT_NAME((short)6, "sortName"),
      SORT_DIR((short)7, "sortDir");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER
            return USER;
          case 2: // START_DATE
            return START_DATE;
          case 3: // END_DATE
            return END_DATE;
          case 4: // PROVINCE
            return PROVINCE;
          case 5: // CITY
            return CITY;
          case 6: // SORT_NAME
            return SORT_NAME;
          case 7: // SORT_DIR
            return SORT_DIR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USER_ISSET_ID = 0;
    private static final int __STARTDATE_ISSET_ID = 1;
    private static final int __ENDDATE_ISSET_ID = 2;
    private static final int __PROVINCE_ISSET_ID = 3;
    private static final int __CITY_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PROVINCE, new org.apache.thrift.meta_data.FieldMetaData("province", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SORT_NAME, new org.apache.thrift.meta_data.FieldMetaData("sortName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SORT_DIR, new org.apache.thrift.meta_data.FieldMetaData("sortDir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStaticIndexByDateForAdmin_args.class, metaDataMap);
    }

    public getStaticIndexByDateForAdmin_args() {
    }

    public getStaticIndexByDateForAdmin_args(
      long user,
      long startDate,
      long endDate,
      long province,
      long city,
      String sortName,
      String sortDir)
    {
      this();
      this.user = user;
      setUserIsSet(true);
      this.startDate = startDate;
      setStartDateIsSet(true);
      this.endDate = endDate;
      setEndDateIsSet(true);
      this.province = province;
      setProvinceIsSet(true);
      this.city = city;
      setCityIsSet(true);
      this.sortName = sortName;
      this.sortDir = sortDir;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStaticIndexByDateForAdmin_args(getStaticIndexByDateForAdmin_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.user = other.user;
      this.startDate = other.startDate;
      this.endDate = other.endDate;
      this.province = other.province;
      this.city = other.city;
      if (other.isSetSortName()) {
        this.sortName = other.sortName;
      }
      if (other.isSetSortDir()) {
        this.sortDir = other.sortDir;
      }
    }

    public getStaticIndexByDateForAdmin_args deepCopy() {
      return new getStaticIndexByDateForAdmin_args(this);
    }

    @Override
    public void clear() {
      setUserIsSet(false);
      this.user = 0;
      setStartDateIsSet(false);
      this.startDate = 0;
      setEndDateIsSet(false);
      this.endDate = 0;
      setProvinceIsSet(false);
      this.province = 0;
      setCityIsSet(false);
      this.city = 0;
      this.sortName = null;
      this.sortDir = null;
    }

    public long getUser() {
      return this.user;
    }

    public getStaticIndexByDateForAdmin_args setUser(long user) {
      this.user = user;
      setUserIsSet(true);
      return this;
    }

    public void unsetUser() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USER_ISSET_ID);
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return EncodingUtils.testBit(__isset_bitfield, __USER_ISSET_ID);
    }

    public void setUserIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USER_ISSET_ID, value);
    }

    public long getStartDate() {
      return this.startDate;
    }

    public getStaticIndexByDateForAdmin_args setStartDate(long startDate) {
      this.startDate = startDate;
      setStartDateIsSet(true);
      return this;
    }

    public void unsetStartDate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTDATE_ISSET_ID);
    }

    /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
    public boolean isSetStartDate() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTDATE_ISSET_ID);
    }

    public void setStartDateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTDATE_ISSET_ID, value);
    }

    public long getEndDate() {
      return this.endDate;
    }

    public getStaticIndexByDateForAdmin_args setEndDate(long endDate) {
      this.endDate = endDate;
      setEndDateIsSet(true);
      return this;
    }

    public void unsetEndDate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
    public boolean isSetEndDate() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    public void setEndDateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATE_ISSET_ID, value);
    }

    public long getProvince() {
      return this.province;
    }

    public getStaticIndexByDateForAdmin_args setProvince(long province) {
      this.province = province;
      setProvinceIsSet(true);
      return this;
    }

    public void unsetProvince() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROVINCE_ISSET_ID);
    }

    /** Returns true if field province is set (has been assigned a value) and false otherwise */
    public boolean isSetProvince() {
      return EncodingUtils.testBit(__isset_bitfield, __PROVINCE_ISSET_ID);
    }

    public void setProvinceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROVINCE_ISSET_ID, value);
    }

    public long getCity() {
      return this.city;
    }

    public getStaticIndexByDateForAdmin_args setCity(long city) {
      this.city = city;
      setCityIsSet(true);
      return this;
    }

    public void unsetCity() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CITY_ISSET_ID);
    }

    /** Returns true if field city is set (has been assigned a value) and false otherwise */
    public boolean isSetCity() {
      return EncodingUtils.testBit(__isset_bitfield, __CITY_ISSET_ID);
    }

    public void setCityIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CITY_ISSET_ID, value);
    }

    public String getSortName() {
      return this.sortName;
    }

    public getStaticIndexByDateForAdmin_args setSortName(String sortName) {
      this.sortName = sortName;
      return this;
    }

    public void unsetSortName() {
      this.sortName = null;
    }

    /** Returns true if field sortName is set (has been assigned a value) and false otherwise */
    public boolean isSetSortName() {
      return this.sortName != null;
    }

    public void setSortNameIsSet(boolean value) {
      if (!value) {
        this.sortName = null;
      }
    }

    public String getSortDir() {
      return this.sortDir;
    }

    public getStaticIndexByDateForAdmin_args setSortDir(String sortDir) {
      this.sortDir = sortDir;
      return this;
    }

    public void unsetSortDir() {
      this.sortDir = null;
    }

    /** Returns true if field sortDir is set (has been assigned a value) and false otherwise */
    public boolean isSetSortDir() {
      return this.sortDir != null;
    }

    public void setSortDirIsSet(boolean value) {
      if (!value) {
        this.sortDir = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((Long)value);
        }
        break;

      case START_DATE:
        if (value == null) {
          unsetStartDate();
        } else {
          setStartDate((Long)value);
        }
        break;

      case END_DATE:
        if (value == null) {
          unsetEndDate();
        } else {
          setEndDate((Long)value);
        }
        break;

      case PROVINCE:
        if (value == null) {
          unsetProvince();
        } else {
          setProvince((Long)value);
        }
        break;

      case CITY:
        if (value == null) {
          unsetCity();
        } else {
          setCity((Long)value);
        }
        break;

      case SORT_NAME:
        if (value == null) {
          unsetSortName();
        } else {
          setSortName((String)value);
        }
        break;

      case SORT_DIR:
        if (value == null) {
          unsetSortDir();
        } else {
          setSortDir((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER:
        return getUser();

      case START_DATE:
        return getStartDate();

      case END_DATE:
        return getEndDate();

      case PROVINCE:
        return getProvince();

      case CITY:
        return getCity();

      case SORT_NAME:
        return getSortName();

      case SORT_DIR:
        return getSortDir();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER:
        return isSetUser();
      case START_DATE:
        return isSetStartDate();
      case END_DATE:
        return isSetEndDate();
      case PROVINCE:
        return isSetProvince();
      case CITY:
        return isSetCity();
      case SORT_NAME:
        return isSetSortName();
      case SORT_DIR:
        return isSetSortDir();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStaticIndexByDateForAdmin_args)
        return this.equals((getStaticIndexByDateForAdmin_args)that);
      return false;
    }

    public boolean equals(getStaticIndexByDateForAdmin_args that) {
      if (that == null)
        return false;

      boolean this_present_user = true;
      boolean that_present_user = true;
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (this.user != that.user)
          return false;
      }

      boolean this_present_startDate = true;
      boolean that_present_startDate = true;
      if (this_present_startDate || that_present_startDate) {
        if (!(this_present_startDate && that_present_startDate))
          return false;
        if (this.startDate != that.startDate)
          return false;
      }

      boolean this_present_endDate = true;
      boolean that_present_endDate = true;
      if (this_present_endDate || that_present_endDate) {
        if (!(this_present_endDate && that_present_endDate))
          return false;
        if (this.endDate != that.endDate)
          return false;
      }

      boolean this_present_province = true;
      boolean that_present_province = true;
      if (this_present_province || that_present_province) {
        if (!(this_present_province && that_present_province))
          return false;
        if (this.province != that.province)
          return false;
      }

      boolean this_present_city = true;
      boolean that_present_city = true;
      if (this_present_city || that_present_city) {
        if (!(this_present_city && that_present_city))
          return false;
        if (this.city != that.city)
          return false;
      }

      boolean this_present_sortName = true && this.isSetSortName();
      boolean that_present_sortName = true && that.isSetSortName();
      if (this_present_sortName || that_present_sortName) {
        if (!(this_present_sortName && that_present_sortName))
          return false;
        if (!this.sortName.equals(that.sortName))
          return false;
      }

      boolean this_present_sortDir = true && this.isSetSortDir();
      boolean that_present_sortDir = true && that.isSetSortDir();
      if (this_present_sortDir || that_present_sortDir) {
        if (!(this_present_sortDir && that_present_sortDir))
          return false;
        if (!this.sortDir.equals(that.sortDir))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_user = true;
      list.add(present_user);
      if (present_user)
        list.add(user);

      boolean present_startDate = true;
      list.add(present_startDate);
      if (present_startDate)
        list.add(startDate);

      boolean present_endDate = true;
      list.add(present_endDate);
      if (present_endDate)
        list.add(endDate);

      boolean present_province = true;
      list.add(present_province);
      if (present_province)
        list.add(province);

      boolean present_city = true;
      list.add(present_city);
      if (present_city)
        list.add(city);

      boolean present_sortName = true && (isSetSortName());
      list.add(present_sortName);
      if (present_sortName)
        list.add(sortName);

      boolean present_sortDir = true && (isSetSortDir());
      list.add(present_sortDir);
      if (present_sortDir)
        list.add(sortDir);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStaticIndexByDateForAdmin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartDate()).compareTo(other.isSetStartDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, other.startDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(other.isSetEndDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, other.endDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProvince()).compareTo(other.isSetProvince());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProvince()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.province, other.province);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortName()).compareTo(other.isSetSortName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortName, other.sortName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortDir()).compareTo(other.isSetSortDir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortDir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortDir, other.sortDir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStaticIndexByDateForAdmin_args(");
      boolean first = true;

      sb.append("user:");
      sb.append(this.user);
      first = false;
      if (!first) sb.append(", ");
      sb.append("startDate:");
      sb.append(this.startDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endDate:");
      sb.append(this.endDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("province:");
      sb.append(this.province);
      first = false;
      if (!first) sb.append(", ");
      sb.append("city:");
      sb.append(this.city);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortName:");
      if (this.sortName == null) {
        sb.append("null");
      } else {
        sb.append(this.sortName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortDir:");
      if (this.sortDir == null) {
        sb.append("null");
      } else {
        sb.append(this.sortDir);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStaticIndexByDateForAdmin_argsStandardSchemeFactory implements SchemeFactory {
      public getStaticIndexByDateForAdmin_argsStandardScheme getScheme() {
        return new getStaticIndexByDateForAdmin_argsStandardScheme();
      }
    }

    private static class getStaticIndexByDateForAdmin_argsStandardScheme extends StandardScheme<getStaticIndexByDateForAdmin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStaticIndexByDateForAdmin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.user = iprot.readI64();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startDate = iprot.readI64();
                struct.setStartDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // END_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endDate = iprot.readI64();
                struct.setEndDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PROVINCE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.province = iprot.readI64();
                struct.setProvinceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CITY
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.city = iprot.readI64();
                struct.setCityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // SORT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sortName = iprot.readString();
                struct.setSortNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // SORT_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sortDir = iprot.readString();
                struct.setSortDirIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStaticIndexByDateForAdmin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeI64(struct.user);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_DATE_FIELD_DESC);
        oprot.writeI64(struct.startDate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_DATE_FIELD_DESC);
        oprot.writeI64(struct.endDate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PROVINCE_FIELD_DESC);
        oprot.writeI64(struct.province);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CITY_FIELD_DESC);
        oprot.writeI64(struct.city);
        oprot.writeFieldEnd();
        if (struct.sortName != null) {
          oprot.writeFieldBegin(SORT_NAME_FIELD_DESC);
          oprot.writeString(struct.sortName);
          oprot.writeFieldEnd();
        }
        if (struct.sortDir != null) {
          oprot.writeFieldBegin(SORT_DIR_FIELD_DESC);
          oprot.writeString(struct.sortDir);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStaticIndexByDateForAdmin_argsTupleSchemeFactory implements SchemeFactory {
      public getStaticIndexByDateForAdmin_argsTupleScheme getScheme() {
        return new getStaticIndexByDateForAdmin_argsTupleScheme();
      }
    }

    private static class getStaticIndexByDateForAdmin_argsTupleScheme extends TupleScheme<getStaticIndexByDateForAdmin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStaticIndexByDateForAdmin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser()) {
          optionals.set(0);
        }
        if (struct.isSetStartDate()) {
          optionals.set(1);
        }
        if (struct.isSetEndDate()) {
          optionals.set(2);
        }
        if (struct.isSetProvince()) {
          optionals.set(3);
        }
        if (struct.isSetCity()) {
          optionals.set(4);
        }
        if (struct.isSetSortName()) {
          optionals.set(5);
        }
        if (struct.isSetSortDir()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetUser()) {
          oprot.writeI64(struct.user);
        }
        if (struct.isSetStartDate()) {
          oprot.writeI64(struct.startDate);
        }
        if (struct.isSetEndDate()) {
          oprot.writeI64(struct.endDate);
        }
        if (struct.isSetProvince()) {
          oprot.writeI64(struct.province);
        }
        if (struct.isSetCity()) {
          oprot.writeI64(struct.city);
        }
        if (struct.isSetSortName()) {
          oprot.writeString(struct.sortName);
        }
        if (struct.isSetSortDir()) {
          oprot.writeString(struct.sortDir);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStaticIndexByDateForAdmin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.user = iprot.readI64();
          struct.setUserIsSet(true);
        }
        if (incoming.get(1)) {
          struct.startDate = iprot.readI64();
          struct.setStartDateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.endDate = iprot.readI64();
          struct.setEndDateIsSet(true);
        }
        if (incoming.get(3)) {
          struct.province = iprot.readI64();
          struct.setProvinceIsSet(true);
        }
        if (incoming.get(4)) {
          struct.city = iprot.readI64();
          struct.setCityIsSet(true);
        }
        if (incoming.get(5)) {
          struct.sortName = iprot.readString();
          struct.setSortNameIsSet(true);
        }
        if (incoming.get(6)) {
          struct.sortDir = iprot.readString();
          struct.setSortDirIsSet(true);
        }
      }
    }

  }

  public static class getStaticIndexByDateForAdmin_result implements org.apache.thrift.TBase<getStaticIndexByDateForAdmin_result, getStaticIndexByDateForAdmin_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStaticIndexByDateForAdmin_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStaticIndexByDateForAdmin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStaticIndexByDateForAdmin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStaticIndexByDateForAdmin_resultTupleSchemeFactory());
    }

    private String success; // required
    private com.alone.thrift.struct.InvalidOperation ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStaticIndexByDateForAdmin_result.class, metaDataMap);
    }

    public getStaticIndexByDateForAdmin_result() {
    }

    public getStaticIndexByDateForAdmin_result(
      String success,
      com.alone.thrift.struct.InvalidOperation ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStaticIndexByDateForAdmin_result(getStaticIndexByDateForAdmin_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new com.alone.thrift.struct.InvalidOperation(other.ex);
      }
    }

    public getStaticIndexByDateForAdmin_result deepCopy() {
      return new getStaticIndexByDateForAdmin_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getStaticIndexByDateForAdmin_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.alone.thrift.struct.InvalidOperation getEx() {
      return this.ex;
    }

    public getStaticIndexByDateForAdmin_result setEx(com.alone.thrift.struct.InvalidOperation ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((com.alone.thrift.struct.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStaticIndexByDateForAdmin_result)
        return this.equals((getStaticIndexByDateForAdmin_result)that);
      return false;
    }

    public boolean equals(getStaticIndexByDateForAdmin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStaticIndexByDateForAdmin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStaticIndexByDateForAdmin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStaticIndexByDateForAdmin_resultStandardSchemeFactory implements SchemeFactory {
      public getStaticIndexByDateForAdmin_resultStandardScheme getScheme() {
        return new getStaticIndexByDateForAdmin_resultStandardScheme();
      }
    }

    private static class getStaticIndexByDateForAdmin_resultStandardScheme extends StandardScheme<getStaticIndexByDateForAdmin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStaticIndexByDateForAdmin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new com.alone.thrift.struct.InvalidOperation();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStaticIndexByDateForAdmin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStaticIndexByDateForAdmin_resultTupleSchemeFactory implements SchemeFactory {
      public getStaticIndexByDateForAdmin_resultTupleScheme getScheme() {
        return new getStaticIndexByDateForAdmin_resultTupleScheme();
      }
    }

    private static class getStaticIndexByDateForAdmin_resultTupleScheme extends TupleScheme<getStaticIndexByDateForAdmin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStaticIndexByDateForAdmin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStaticIndexByDateForAdmin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new com.alone.thrift.struct.InvalidOperation();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class getStaticIndexByDate_args implements org.apache.thrift.TBase<getStaticIndexByDate_args, getStaticIndexByDate_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStaticIndexByDate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStaticIndexByDate_args");

    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField PROVINCE_FIELD_DESC = new org.apache.thrift.protocol.TField("province", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField SORT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sortName", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField SORT_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("sortDir", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStaticIndexByDate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStaticIndexByDate_argsTupleSchemeFactory());
    }

    private long user; // required
    private long startDate; // required
    private long endDate; // required
    private long province; // required
    private long city; // required
    private String sortName; // required
    private String sortDir; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER((short)1, "user"),
      START_DATE((short)2, "startDate"),
      END_DATE((short)3, "endDate"),
      PROVINCE((short)4, "province"),
      CITY((short)5, "city"),
      SORT_NAME((short)6, "sortName"),
      SORT_DIR((short)7, "sortDir");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER
            return USER;
          case 2: // START_DATE
            return START_DATE;
          case 3: // END_DATE
            return END_DATE;
          case 4: // PROVINCE
            return PROVINCE;
          case 5: // CITY
            return CITY;
          case 6: // SORT_NAME
            return SORT_NAME;
          case 7: // SORT_DIR
            return SORT_DIR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USER_ISSET_ID = 0;
    private static final int __STARTDATE_ISSET_ID = 1;
    private static final int __ENDDATE_ISSET_ID = 2;
    private static final int __PROVINCE_ISSET_ID = 3;
    private static final int __CITY_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PROVINCE, new org.apache.thrift.meta_data.FieldMetaData("province", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SORT_NAME, new org.apache.thrift.meta_data.FieldMetaData("sortName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SORT_DIR, new org.apache.thrift.meta_data.FieldMetaData("sortDir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStaticIndexByDate_args.class, metaDataMap);
    }

    public getStaticIndexByDate_args() {
    }

    public getStaticIndexByDate_args(
      long user,
      long startDate,
      long endDate,
      long province,
      long city,
      String sortName,
      String sortDir)
    {
      this();
      this.user = user;
      setUserIsSet(true);
      this.startDate = startDate;
      setStartDateIsSet(true);
      this.endDate = endDate;
      setEndDateIsSet(true);
      this.province = province;
      setProvinceIsSet(true);
      this.city = city;
      setCityIsSet(true);
      this.sortName = sortName;
      this.sortDir = sortDir;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStaticIndexByDate_args(getStaticIndexByDate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.user = other.user;
      this.startDate = other.startDate;
      this.endDate = other.endDate;
      this.province = other.province;
      this.city = other.city;
      if (other.isSetSortName()) {
        this.sortName = other.sortName;
      }
      if (other.isSetSortDir()) {
        this.sortDir = other.sortDir;
      }
    }

    public getStaticIndexByDate_args deepCopy() {
      return new getStaticIndexByDate_args(this);
    }

    @Override
    public void clear() {
      setUserIsSet(false);
      this.user = 0;
      setStartDateIsSet(false);
      this.startDate = 0;
      setEndDateIsSet(false);
      this.endDate = 0;
      setProvinceIsSet(false);
      this.province = 0;
      setCityIsSet(false);
      this.city = 0;
      this.sortName = null;
      this.sortDir = null;
    }

    public long getUser() {
      return this.user;
    }

    public getStaticIndexByDate_args setUser(long user) {
      this.user = user;
      setUserIsSet(true);
      return this;
    }

    public void unsetUser() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USER_ISSET_ID);
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return EncodingUtils.testBit(__isset_bitfield, __USER_ISSET_ID);
    }

    public void setUserIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USER_ISSET_ID, value);
    }

    public long getStartDate() {
      return this.startDate;
    }

    public getStaticIndexByDate_args setStartDate(long startDate) {
      this.startDate = startDate;
      setStartDateIsSet(true);
      return this;
    }

    public void unsetStartDate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTDATE_ISSET_ID);
    }

    /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
    public boolean isSetStartDate() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTDATE_ISSET_ID);
    }

    public void setStartDateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTDATE_ISSET_ID, value);
    }

    public long getEndDate() {
      return this.endDate;
    }

    public getStaticIndexByDate_args setEndDate(long endDate) {
      this.endDate = endDate;
      setEndDateIsSet(true);
      return this;
    }

    public void unsetEndDate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
    public boolean isSetEndDate() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    public void setEndDateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATE_ISSET_ID, value);
    }

    public long getProvince() {
      return this.province;
    }

    public getStaticIndexByDate_args setProvince(long province) {
      this.province = province;
      setProvinceIsSet(true);
      return this;
    }

    public void unsetProvince() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROVINCE_ISSET_ID);
    }

    /** Returns true if field province is set (has been assigned a value) and false otherwise */
    public boolean isSetProvince() {
      return EncodingUtils.testBit(__isset_bitfield, __PROVINCE_ISSET_ID);
    }

    public void setProvinceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROVINCE_ISSET_ID, value);
    }

    public long getCity() {
      return this.city;
    }

    public getStaticIndexByDate_args setCity(long city) {
      this.city = city;
      setCityIsSet(true);
      return this;
    }

    public void unsetCity() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CITY_ISSET_ID);
    }

    /** Returns true if field city is set (has been assigned a value) and false otherwise */
    public boolean isSetCity() {
      return EncodingUtils.testBit(__isset_bitfield, __CITY_ISSET_ID);
    }

    public void setCityIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CITY_ISSET_ID, value);
    }

    public String getSortName() {
      return this.sortName;
    }

    public getStaticIndexByDate_args setSortName(String sortName) {
      this.sortName = sortName;
      return this;
    }

    public void unsetSortName() {
      this.sortName = null;
    }

    /** Returns true if field sortName is set (has been assigned a value) and false otherwise */
    public boolean isSetSortName() {
      return this.sortName != null;
    }

    public void setSortNameIsSet(boolean value) {
      if (!value) {
        this.sortName = null;
      }
    }

    public String getSortDir() {
      return this.sortDir;
    }

    public getStaticIndexByDate_args setSortDir(String sortDir) {
      this.sortDir = sortDir;
      return this;
    }

    public void unsetSortDir() {
      this.sortDir = null;
    }

    /** Returns true if field sortDir is set (has been assigned a value) and false otherwise */
    public boolean isSetSortDir() {
      return this.sortDir != null;
    }

    public void setSortDirIsSet(boolean value) {
      if (!value) {
        this.sortDir = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((Long)value);
        }
        break;

      case START_DATE:
        if (value == null) {
          unsetStartDate();
        } else {
          setStartDate((Long)value);
        }
        break;

      case END_DATE:
        if (value == null) {
          unsetEndDate();
        } else {
          setEndDate((Long)value);
        }
        break;

      case PROVINCE:
        if (value == null) {
          unsetProvince();
        } else {
          setProvince((Long)value);
        }
        break;

      case CITY:
        if (value == null) {
          unsetCity();
        } else {
          setCity((Long)value);
        }
        break;

      case SORT_NAME:
        if (value == null) {
          unsetSortName();
        } else {
          setSortName((String)value);
        }
        break;

      case SORT_DIR:
        if (value == null) {
          unsetSortDir();
        } else {
          setSortDir((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER:
        return getUser();

      case START_DATE:
        return getStartDate();

      case END_DATE:
        return getEndDate();

      case PROVINCE:
        return getProvince();

      case CITY:
        return getCity();

      case SORT_NAME:
        return getSortName();

      case SORT_DIR:
        return getSortDir();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER:
        return isSetUser();
      case START_DATE:
        return isSetStartDate();
      case END_DATE:
        return isSetEndDate();
      case PROVINCE:
        return isSetProvince();
      case CITY:
        return isSetCity();
      case SORT_NAME:
        return isSetSortName();
      case SORT_DIR:
        return isSetSortDir();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStaticIndexByDate_args)
        return this.equals((getStaticIndexByDate_args)that);
      return false;
    }

    public boolean equals(getStaticIndexByDate_args that) {
      if (that == null)
        return false;

      boolean this_present_user = true;
      boolean that_present_user = true;
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (this.user != that.user)
          return false;
      }

      boolean this_present_startDate = true;
      boolean that_present_startDate = true;
      if (this_present_startDate || that_present_startDate) {
        if (!(this_present_startDate && that_present_startDate))
          return false;
        if (this.startDate != that.startDate)
          return false;
      }

      boolean this_present_endDate = true;
      boolean that_present_endDate = true;
      if (this_present_endDate || that_present_endDate) {
        if (!(this_present_endDate && that_present_endDate))
          return false;
        if (this.endDate != that.endDate)
          return false;
      }

      boolean this_present_province = true;
      boolean that_present_province = true;
      if (this_present_province || that_present_province) {
        if (!(this_present_province && that_present_province))
          return false;
        if (this.province != that.province)
          return false;
      }

      boolean this_present_city = true;
      boolean that_present_city = true;
      if (this_present_city || that_present_city) {
        if (!(this_present_city && that_present_city))
          return false;
        if (this.city != that.city)
          return false;
      }

      boolean this_present_sortName = true && this.isSetSortName();
      boolean that_present_sortName = true && that.isSetSortName();
      if (this_present_sortName || that_present_sortName) {
        if (!(this_present_sortName && that_present_sortName))
          return false;
        if (!this.sortName.equals(that.sortName))
          return false;
      }

      boolean this_present_sortDir = true && this.isSetSortDir();
      boolean that_present_sortDir = true && that.isSetSortDir();
      if (this_present_sortDir || that_present_sortDir) {
        if (!(this_present_sortDir && that_present_sortDir))
          return false;
        if (!this.sortDir.equals(that.sortDir))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_user = true;
      list.add(present_user);
      if (present_user)
        list.add(user);

      boolean present_startDate = true;
      list.add(present_startDate);
      if (present_startDate)
        list.add(startDate);

      boolean present_endDate = true;
      list.add(present_endDate);
      if (present_endDate)
        list.add(endDate);

      boolean present_province = true;
      list.add(present_province);
      if (present_province)
        list.add(province);

      boolean present_city = true;
      list.add(present_city);
      if (present_city)
        list.add(city);

      boolean present_sortName = true && (isSetSortName());
      list.add(present_sortName);
      if (present_sortName)
        list.add(sortName);

      boolean present_sortDir = true && (isSetSortDir());
      list.add(present_sortDir);
      if (present_sortDir)
        list.add(sortDir);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStaticIndexByDate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartDate()).compareTo(other.isSetStartDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, other.startDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(other.isSetEndDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, other.endDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProvince()).compareTo(other.isSetProvince());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProvince()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.province, other.province);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortName()).compareTo(other.isSetSortName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortName, other.sortName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortDir()).compareTo(other.isSetSortDir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortDir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortDir, other.sortDir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStaticIndexByDate_args(");
      boolean first = true;

      sb.append("user:");
      sb.append(this.user);
      first = false;
      if (!first) sb.append(", ");
      sb.append("startDate:");
      sb.append(this.startDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endDate:");
      sb.append(this.endDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("province:");
      sb.append(this.province);
      first = false;
      if (!first) sb.append(", ");
      sb.append("city:");
      sb.append(this.city);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortName:");
      if (this.sortName == null) {
        sb.append("null");
      } else {
        sb.append(this.sortName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortDir:");
      if (this.sortDir == null) {
        sb.append("null");
      } else {
        sb.append(this.sortDir);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStaticIndexByDate_argsStandardSchemeFactory implements SchemeFactory {
      public getStaticIndexByDate_argsStandardScheme getScheme() {
        return new getStaticIndexByDate_argsStandardScheme();
      }
    }

    private static class getStaticIndexByDate_argsStandardScheme extends StandardScheme<getStaticIndexByDate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStaticIndexByDate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.user = iprot.readI64();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startDate = iprot.readI64();
                struct.setStartDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // END_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endDate = iprot.readI64();
                struct.setEndDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PROVINCE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.province = iprot.readI64();
                struct.setProvinceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CITY
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.city = iprot.readI64();
                struct.setCityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // SORT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sortName = iprot.readString();
                struct.setSortNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // SORT_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sortDir = iprot.readString();
                struct.setSortDirIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStaticIndexByDate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeI64(struct.user);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_DATE_FIELD_DESC);
        oprot.writeI64(struct.startDate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_DATE_FIELD_DESC);
        oprot.writeI64(struct.endDate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PROVINCE_FIELD_DESC);
        oprot.writeI64(struct.province);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CITY_FIELD_DESC);
        oprot.writeI64(struct.city);
        oprot.writeFieldEnd();
        if (struct.sortName != null) {
          oprot.writeFieldBegin(SORT_NAME_FIELD_DESC);
          oprot.writeString(struct.sortName);
          oprot.writeFieldEnd();
        }
        if (struct.sortDir != null) {
          oprot.writeFieldBegin(SORT_DIR_FIELD_DESC);
          oprot.writeString(struct.sortDir);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStaticIndexByDate_argsTupleSchemeFactory implements SchemeFactory {
      public getStaticIndexByDate_argsTupleScheme getScheme() {
        return new getStaticIndexByDate_argsTupleScheme();
      }
    }

    private static class getStaticIndexByDate_argsTupleScheme extends TupleScheme<getStaticIndexByDate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStaticIndexByDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser()) {
          optionals.set(0);
        }
        if (struct.isSetStartDate()) {
          optionals.set(1);
        }
        if (struct.isSetEndDate()) {
          optionals.set(2);
        }
        if (struct.isSetProvince()) {
          optionals.set(3);
        }
        if (struct.isSetCity()) {
          optionals.set(4);
        }
        if (struct.isSetSortName()) {
          optionals.set(5);
        }
        if (struct.isSetSortDir()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetUser()) {
          oprot.writeI64(struct.user);
        }
        if (struct.isSetStartDate()) {
          oprot.writeI64(struct.startDate);
        }
        if (struct.isSetEndDate()) {
          oprot.writeI64(struct.endDate);
        }
        if (struct.isSetProvince()) {
          oprot.writeI64(struct.province);
        }
        if (struct.isSetCity()) {
          oprot.writeI64(struct.city);
        }
        if (struct.isSetSortName()) {
          oprot.writeString(struct.sortName);
        }
        if (struct.isSetSortDir()) {
          oprot.writeString(struct.sortDir);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStaticIndexByDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.user = iprot.readI64();
          struct.setUserIsSet(true);
        }
        if (incoming.get(1)) {
          struct.startDate = iprot.readI64();
          struct.setStartDateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.endDate = iprot.readI64();
          struct.setEndDateIsSet(true);
        }
        if (incoming.get(3)) {
          struct.province = iprot.readI64();
          struct.setProvinceIsSet(true);
        }
        if (incoming.get(4)) {
          struct.city = iprot.readI64();
          struct.setCityIsSet(true);
        }
        if (incoming.get(5)) {
          struct.sortName = iprot.readString();
          struct.setSortNameIsSet(true);
        }
        if (incoming.get(6)) {
          struct.sortDir = iprot.readString();
          struct.setSortDirIsSet(true);
        }
      }
    }

  }

  public static class getStaticIndexByDate_result implements org.apache.thrift.TBase<getStaticIndexByDate_result, getStaticIndexByDate_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStaticIndexByDate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStaticIndexByDate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStaticIndexByDate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStaticIndexByDate_resultTupleSchemeFactory());
    }

    private String success; // required
    private com.alone.thrift.struct.InvalidOperation ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStaticIndexByDate_result.class, metaDataMap);
    }

    public getStaticIndexByDate_result() {
    }

    public getStaticIndexByDate_result(
      String success,
      com.alone.thrift.struct.InvalidOperation ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStaticIndexByDate_result(getStaticIndexByDate_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new com.alone.thrift.struct.InvalidOperation(other.ex);
      }
    }

    public getStaticIndexByDate_result deepCopy() {
      return new getStaticIndexByDate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getStaticIndexByDate_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.alone.thrift.struct.InvalidOperation getEx() {
      return this.ex;
    }

    public getStaticIndexByDate_result setEx(com.alone.thrift.struct.InvalidOperation ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((com.alone.thrift.struct.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStaticIndexByDate_result)
        return this.equals((getStaticIndexByDate_result)that);
      return false;
    }

    public boolean equals(getStaticIndexByDate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStaticIndexByDate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStaticIndexByDate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStaticIndexByDate_resultStandardSchemeFactory implements SchemeFactory {
      public getStaticIndexByDate_resultStandardScheme getScheme() {
        return new getStaticIndexByDate_resultStandardScheme();
      }
    }

    private static class getStaticIndexByDate_resultStandardScheme extends StandardScheme<getStaticIndexByDate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStaticIndexByDate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new com.alone.thrift.struct.InvalidOperation();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStaticIndexByDate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStaticIndexByDate_resultTupleSchemeFactory implements SchemeFactory {
      public getStaticIndexByDate_resultTupleScheme getScheme() {
        return new getStaticIndexByDate_resultTupleScheme();
      }
    }

    private static class getStaticIndexByDate_resultTupleScheme extends TupleScheme<getStaticIndexByDate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStaticIndexByDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStaticIndexByDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new com.alone.thrift.struct.InvalidOperation();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

}
